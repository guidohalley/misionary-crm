
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Persona
 * 
 */
export type Persona = $Result.DefaultSelection<Prisma.$PersonaPayload>
/**
 * Model Producto
 * 
 */
export type Producto = $Result.DefaultSelection<Prisma.$ProductoPayload>
/**
 * Model Servicio
 * 
 */
export type Servicio = $Result.DefaultSelection<Prisma.$ServicioPayload>
/**
 * Model Presupuesto
 * 
 */
export type Presupuesto = $Result.DefaultSelection<Prisma.$PresupuestoPayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model Factura
 * 
 */
export type Factura = $Result.DefaultSelection<Prisma.$FacturaPayload>
/**
 * Model Recibo
 * 
 */
export type Recibo = $Result.DefaultSelection<Prisma.$ReciboPayload>
/**
 * Model Impuesto
 * 
 */
export type Impuesto = $Result.DefaultSelection<Prisma.$ImpuestoPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TipoPersona: {
  CLIENTE: 'CLIENTE',
  PROVEEDOR: 'PROVEEDOR',
  INTERNO: 'INTERNO'
};

export type TipoPersona = (typeof TipoPersona)[keyof typeof TipoPersona]


export const RolUsuario: {
  ADMIN: 'ADMIN',
  CONTADOR: 'CONTADOR',
  PROVEEDOR: 'PROVEEDOR'
};

export type RolUsuario = (typeof RolUsuario)[keyof typeof RolUsuario]


export const EstadoPresupuesto: {
  BORRADOR: 'BORRADOR',
  ENVIADO: 'ENVIADO',
  APROBADO: 'APROBADO',
  FACTURADO: 'FACTURADO'
};

export type EstadoPresupuesto = (typeof EstadoPresupuesto)[keyof typeof EstadoPresupuesto]


export const EstadoFactura: {
  EMITIDA: 'EMITIDA',
  PAGADA: 'PAGADA',
  ANULADA: 'ANULADA'
};

export type EstadoFactura = (typeof EstadoFactura)[keyof typeof EstadoFactura]

}

export type TipoPersona = $Enums.TipoPersona

export const TipoPersona: typeof $Enums.TipoPersona

export type RolUsuario = $Enums.RolUsuario

export const RolUsuario: typeof $Enums.RolUsuario

export type EstadoPresupuesto = $Enums.EstadoPresupuesto

export const EstadoPresupuesto: typeof $Enums.EstadoPresupuesto

export type EstadoFactura = $Enums.EstadoFactura

export const EstadoFactura: typeof $Enums.EstadoFactura

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Personas
 * const personas = await prisma.persona.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Personas
   * const personas = await prisma.persona.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.persona`: Exposes CRUD operations for the **Persona** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Personas
    * const personas = await prisma.persona.findMany()
    * ```
    */
  get persona(): Prisma.PersonaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.producto`: Exposes CRUD operations for the **Producto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productos
    * const productos = await prisma.producto.findMany()
    * ```
    */
  get producto(): Prisma.ProductoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.servicio`: Exposes CRUD operations for the **Servicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servicios
    * const servicios = await prisma.servicio.findMany()
    * ```
    */
  get servicio(): Prisma.ServicioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presupuesto`: Exposes CRUD operations for the **Presupuesto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Presupuestos
    * const presupuestos = await prisma.presupuesto.findMany()
    * ```
    */
  get presupuesto(): Prisma.PresupuestoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.factura`: Exposes CRUD operations for the **Factura** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Facturas
    * const facturas = await prisma.factura.findMany()
    * ```
    */
  get factura(): Prisma.FacturaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recibo`: Exposes CRUD operations for the **Recibo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recibos
    * const recibos = await prisma.recibo.findMany()
    * ```
    */
  get recibo(): Prisma.ReciboDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.impuesto`: Exposes CRUD operations for the **Impuesto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Impuestos
    * const impuestos = await prisma.impuesto.findMany()
    * ```
    */
  get impuesto(): Prisma.ImpuestoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Persona: 'Persona',
    Producto: 'Producto',
    Servicio: 'Servicio',
    Presupuesto: 'Presupuesto',
    Item: 'Item',
    Factura: 'Factura',
    Recibo: 'Recibo',
    Impuesto: 'Impuesto'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "persona" | "producto" | "servicio" | "presupuesto" | "item" | "factura" | "recibo" | "impuesto"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Persona: {
        payload: Prisma.$PersonaPayload<ExtArgs>
        fields: Prisma.PersonaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          findFirst: {
            args: Prisma.PersonaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          findMany: {
            args: Prisma.PersonaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>[]
          }
          create: {
            args: Prisma.PersonaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          createMany: {
            args: Prisma.PersonaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>[]
          }
          delete: {
            args: Prisma.PersonaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          update: {
            args: Prisma.PersonaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          deleteMany: {
            args: Prisma.PersonaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PersonaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>[]
          }
          upsert: {
            args: Prisma.PersonaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          aggregate: {
            args: Prisma.PersonaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePersona>
          }
          groupBy: {
            args: Prisma.PersonaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonaCountArgs<ExtArgs>
            result: $Utils.Optional<PersonaCountAggregateOutputType> | number
          }
        }
      }
      Producto: {
        payload: Prisma.$ProductoPayload<ExtArgs>
        fields: Prisma.ProductoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          findFirst: {
            args: Prisma.ProductoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          findMany: {
            args: Prisma.ProductoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>[]
          }
          create: {
            args: Prisma.ProductoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          createMany: {
            args: Prisma.ProductoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>[]
          }
          delete: {
            args: Prisma.ProductoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          update: {
            args: Prisma.ProductoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          deleteMany: {
            args: Prisma.ProductoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>[]
          }
          upsert: {
            args: Prisma.ProductoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          aggregate: {
            args: Prisma.ProductoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProducto>
          }
          groupBy: {
            args: Prisma.ProductoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductoCountArgs<ExtArgs>
            result: $Utils.Optional<ProductoCountAggregateOutputType> | number
          }
        }
      }
      Servicio: {
        payload: Prisma.$ServicioPayload<ExtArgs>
        fields: Prisma.ServicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          findFirst: {
            args: Prisma.ServicioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          findMany: {
            args: Prisma.ServicioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          create: {
            args: Prisma.ServicioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          createMany: {
            args: Prisma.ServicioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServicioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          delete: {
            args: Prisma.ServicioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          update: {
            args: Prisma.ServicioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          deleteMany: {
            args: Prisma.ServicioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServicioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServicioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          upsert: {
            args: Prisma.ServicioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          aggregate: {
            args: Prisma.ServicioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServicio>
          }
          groupBy: {
            args: Prisma.ServicioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicioCountArgs<ExtArgs>
            result: $Utils.Optional<ServicioCountAggregateOutputType> | number
          }
        }
      }
      Presupuesto: {
        payload: Prisma.$PresupuestoPayload<ExtArgs>
        fields: Prisma.PresupuestoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PresupuestoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PresupuestoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload>
          }
          findFirst: {
            args: Prisma.PresupuestoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PresupuestoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload>
          }
          findMany: {
            args: Prisma.PresupuestoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload>[]
          }
          create: {
            args: Prisma.PresupuestoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload>
          }
          createMany: {
            args: Prisma.PresupuestoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PresupuestoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload>[]
          }
          delete: {
            args: Prisma.PresupuestoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload>
          }
          update: {
            args: Prisma.PresupuestoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload>
          }
          deleteMany: {
            args: Prisma.PresupuestoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PresupuestoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PresupuestoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload>[]
          }
          upsert: {
            args: Prisma.PresupuestoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresupuestoPayload>
          }
          aggregate: {
            args: Prisma.PresupuestoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresupuesto>
          }
          groupBy: {
            args: Prisma.PresupuestoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PresupuestoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PresupuestoCountArgs<ExtArgs>
            result: $Utils.Optional<PresupuestoCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      Factura: {
        payload: Prisma.$FacturaPayload<ExtArgs>
        fields: Prisma.FacturaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacturaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacturaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          findFirst: {
            args: Prisma.FacturaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacturaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          findMany: {
            args: Prisma.FacturaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>[]
          }
          create: {
            args: Prisma.FacturaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          createMany: {
            args: Prisma.FacturaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FacturaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>[]
          }
          delete: {
            args: Prisma.FacturaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          update: {
            args: Prisma.FacturaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          deleteMany: {
            args: Prisma.FacturaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FacturaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FacturaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>[]
          }
          upsert: {
            args: Prisma.FacturaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          aggregate: {
            args: Prisma.FacturaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFactura>
          }
          groupBy: {
            args: Prisma.FacturaGroupByArgs<ExtArgs>
            result: $Utils.Optional<FacturaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacturaCountArgs<ExtArgs>
            result: $Utils.Optional<FacturaCountAggregateOutputType> | number
          }
        }
      }
      Recibo: {
        payload: Prisma.$ReciboPayload<ExtArgs>
        fields: Prisma.ReciboFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReciboFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReciboFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload>
          }
          findFirst: {
            args: Prisma.ReciboFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReciboFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload>
          }
          findMany: {
            args: Prisma.ReciboFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload>[]
          }
          create: {
            args: Prisma.ReciboCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload>
          }
          createMany: {
            args: Prisma.ReciboCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReciboCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload>[]
          }
          delete: {
            args: Prisma.ReciboDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload>
          }
          update: {
            args: Prisma.ReciboUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload>
          }
          deleteMany: {
            args: Prisma.ReciboDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReciboUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReciboUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload>[]
          }
          upsert: {
            args: Prisma.ReciboUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReciboPayload>
          }
          aggregate: {
            args: Prisma.ReciboAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecibo>
          }
          groupBy: {
            args: Prisma.ReciboGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReciboGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReciboCountArgs<ExtArgs>
            result: $Utils.Optional<ReciboCountAggregateOutputType> | number
          }
        }
      }
      Impuesto: {
        payload: Prisma.$ImpuestoPayload<ExtArgs>
        fields: Prisma.ImpuestoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImpuestoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImpuestoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload>
          }
          findFirst: {
            args: Prisma.ImpuestoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImpuestoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload>
          }
          findMany: {
            args: Prisma.ImpuestoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload>[]
          }
          create: {
            args: Prisma.ImpuestoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload>
          }
          createMany: {
            args: Prisma.ImpuestoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImpuestoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload>[]
          }
          delete: {
            args: Prisma.ImpuestoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload>
          }
          update: {
            args: Prisma.ImpuestoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload>
          }
          deleteMany: {
            args: Prisma.ImpuestoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImpuestoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImpuestoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload>[]
          }
          upsert: {
            args: Prisma.ImpuestoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImpuestoPayload>
          }
          aggregate: {
            args: Prisma.ImpuestoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImpuesto>
          }
          groupBy: {
            args: Prisma.ImpuestoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImpuestoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImpuestoCountArgs<ExtArgs>
            result: $Utils.Optional<ImpuestoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    persona?: PersonaOmit
    producto?: ProductoOmit
    servicio?: ServicioOmit
    presupuesto?: PresupuestoOmit
    item?: ItemOmit
    factura?: FacturaOmit
    recibo?: ReciboOmit
    impuesto?: ImpuestoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PersonaCountOutputType
   */

  export type PersonaCountOutputType = {
    productos: number
    servicios: number
    presupuestos: number
    recibos: number
  }

  export type PersonaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productos?: boolean | PersonaCountOutputTypeCountProductosArgs
    servicios?: boolean | PersonaCountOutputTypeCountServiciosArgs
    presupuestos?: boolean | PersonaCountOutputTypeCountPresupuestosArgs
    recibos?: boolean | PersonaCountOutputTypeCountRecibosArgs
  }

  // Custom InputTypes
  /**
   * PersonaCountOutputType without action
   */
  export type PersonaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonaCountOutputType
     */
    select?: PersonaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PersonaCountOutputType without action
   */
  export type PersonaCountOutputTypeCountProductosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductoWhereInput
  }

  /**
   * PersonaCountOutputType without action
   */
  export type PersonaCountOutputTypeCountServiciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioWhereInput
  }

  /**
   * PersonaCountOutputType without action
   */
  export type PersonaCountOutputTypeCountPresupuestosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresupuestoWhereInput
  }

  /**
   * PersonaCountOutputType without action
   */
  export type PersonaCountOutputTypeCountRecibosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReciboWhereInput
  }


  /**
   * Count Type ProductoCountOutputType
   */

  export type ProductoCountOutputType = {
    items: number
  }

  export type ProductoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ProductoCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoCountOutputType
     */
    select?: ProductoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }


  /**
   * Count Type ServicioCountOutputType
   */

  export type ServicioCountOutputType = {
    items: number
  }

  export type ServicioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ServicioCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioCountOutputType
     */
    select?: ServicioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }


  /**
   * Count Type PresupuestoCountOutputType
   */

  export type PresupuestoCountOutputType = {
    items: number
  }

  export type PresupuestoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | PresupuestoCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * PresupuestoCountOutputType without action
   */
  export type PresupuestoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PresupuestoCountOutputType
     */
    select?: PresupuestoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PresupuestoCountOutputType without action
   */
  export type PresupuestoCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }


  /**
   * Count Type ImpuestoCountOutputType
   */

  export type ImpuestoCountOutputType = {
    facturas: number
  }

  export type ImpuestoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facturas?: boolean | ImpuestoCountOutputTypeCountFacturasArgs
  }

  // Custom InputTypes
  /**
   * ImpuestoCountOutputType without action
   */
  export type ImpuestoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImpuestoCountOutputType
     */
    select?: ImpuestoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ImpuestoCountOutputType without action
   */
  export type ImpuestoCountOutputTypeCountFacturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Persona
   */

  export type AggregatePersona = {
    _count: PersonaCountAggregateOutputType | null
    _avg: PersonaAvgAggregateOutputType | null
    _sum: PersonaSumAggregateOutputType | null
    _min: PersonaMinAggregateOutputType | null
    _max: PersonaMaxAggregateOutputType | null
  }

  export type PersonaAvgAggregateOutputType = {
    id: number | null
  }

  export type PersonaSumAggregateOutputType = {
    id: number | null
  }

  export type PersonaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    tipo: $Enums.TipoPersona | null
    telefono: string | null
    cvu: string | null
    password: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PersonaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    tipo: $Enums.TipoPersona | null
    telefono: string | null
    cvu: string | null
    password: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PersonaCountAggregateOutputType = {
    id: number
    nombre: number
    tipo: number
    telefono: number
    cvu: number
    roles: number
    password: number
    email: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PersonaAvgAggregateInputType = {
    id?: true
  }

  export type PersonaSumAggregateInputType = {
    id?: true
  }

  export type PersonaMinAggregateInputType = {
    id?: true
    nombre?: true
    tipo?: true
    telefono?: true
    cvu?: true
    password?: true
    email?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PersonaMaxAggregateInputType = {
    id?: true
    nombre?: true
    tipo?: true
    telefono?: true
    cvu?: true
    password?: true
    email?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PersonaCountAggregateInputType = {
    id?: true
    nombre?: true
    tipo?: true
    telefono?: true
    cvu?: true
    roles?: true
    password?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PersonaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Persona to aggregate.
     */
    where?: PersonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personas to fetch.
     */
    orderBy?: PersonaOrderByWithRelationInput | PersonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Personas
    **/
    _count?: true | PersonaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonaMaxAggregateInputType
  }

  export type GetPersonaAggregateType<T extends PersonaAggregateArgs> = {
        [P in keyof T & keyof AggregatePersona]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersona[P]>
      : GetScalarType<T[P], AggregatePersona[P]>
  }




  export type PersonaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonaWhereInput
    orderBy?: PersonaOrderByWithAggregationInput | PersonaOrderByWithAggregationInput[]
    by: PersonaScalarFieldEnum[] | PersonaScalarFieldEnum
    having?: PersonaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonaCountAggregateInputType | true
    _avg?: PersonaAvgAggregateInputType
    _sum?: PersonaSumAggregateInputType
    _min?: PersonaMinAggregateInputType
    _max?: PersonaMaxAggregateInputType
  }

  export type PersonaGroupByOutputType = {
    id: number
    nombre: string
    tipo: $Enums.TipoPersona
    telefono: string | null
    cvu: string | null
    roles: $Enums.RolUsuario[]
    password: string
    email: string
    createdAt: Date
    updatedAt: Date
    _count: PersonaCountAggregateOutputType | null
    _avg: PersonaAvgAggregateOutputType | null
    _sum: PersonaSumAggregateOutputType | null
    _min: PersonaMinAggregateOutputType | null
    _max: PersonaMaxAggregateOutputType | null
  }

  type GetPersonaGroupByPayload<T extends PersonaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonaGroupByOutputType[P]>
            : GetScalarType<T[P], PersonaGroupByOutputType[P]>
        }
      >
    >


  export type PersonaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    tipo?: boolean
    telefono?: boolean
    cvu?: boolean
    roles?: boolean
    password?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    productos?: boolean | Persona$productosArgs<ExtArgs>
    servicios?: boolean | Persona$serviciosArgs<ExtArgs>
    presupuestos?: boolean | Persona$presupuestosArgs<ExtArgs>
    recibos?: boolean | Persona$recibosArgs<ExtArgs>
    _count?: boolean | PersonaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["persona"]>

  export type PersonaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    tipo?: boolean
    telefono?: boolean
    cvu?: boolean
    roles?: boolean
    password?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["persona"]>

  export type PersonaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    tipo?: boolean
    telefono?: boolean
    cvu?: boolean
    roles?: boolean
    password?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["persona"]>

  export type PersonaSelectScalar = {
    id?: boolean
    nombre?: boolean
    tipo?: boolean
    telefono?: boolean
    cvu?: boolean
    roles?: boolean
    password?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PersonaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "tipo" | "telefono" | "cvu" | "roles" | "password" | "email" | "createdAt" | "updatedAt", ExtArgs["result"]["persona"]>
  export type PersonaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productos?: boolean | Persona$productosArgs<ExtArgs>
    servicios?: boolean | Persona$serviciosArgs<ExtArgs>
    presupuestos?: boolean | Persona$presupuestosArgs<ExtArgs>
    recibos?: boolean | Persona$recibosArgs<ExtArgs>
    _count?: boolean | PersonaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PersonaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PersonaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PersonaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Persona"
    objects: {
      productos: Prisma.$ProductoPayload<ExtArgs>[]
      servicios: Prisma.$ServicioPayload<ExtArgs>[]
      presupuestos: Prisma.$PresupuestoPayload<ExtArgs>[]
      recibos: Prisma.$ReciboPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      tipo: $Enums.TipoPersona
      telefono: string | null
      cvu: string | null
      roles: $Enums.RolUsuario[]
      password: string
      email: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["persona"]>
    composites: {}
  }

  type PersonaGetPayload<S extends boolean | null | undefined | PersonaDefaultArgs> = $Result.GetResult<Prisma.$PersonaPayload, S>

  type PersonaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonaCountAggregateInputType | true
    }

  export interface PersonaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Persona'], meta: { name: 'Persona' } }
    /**
     * Find zero or one Persona that matches the filter.
     * @param {PersonaFindUniqueArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonaFindUniqueArgs>(args: SelectSubset<T, PersonaFindUniqueArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Persona that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonaFindUniqueOrThrowArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonaFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Persona that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaFindFirstArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonaFindFirstArgs>(args?: SelectSubset<T, PersonaFindFirstArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Persona that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaFindFirstOrThrowArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonaFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Personas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Personas
     * const personas = await prisma.persona.findMany()
     * 
     * // Get first 10 Personas
     * const personas = await prisma.persona.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personaWithIdOnly = await prisma.persona.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonaFindManyArgs>(args?: SelectSubset<T, PersonaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Persona.
     * @param {PersonaCreateArgs} args - Arguments to create a Persona.
     * @example
     * // Create one Persona
     * const Persona = await prisma.persona.create({
     *   data: {
     *     // ... data to create a Persona
     *   }
     * })
     * 
     */
    create<T extends PersonaCreateArgs>(args: SelectSubset<T, PersonaCreateArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Personas.
     * @param {PersonaCreateManyArgs} args - Arguments to create many Personas.
     * @example
     * // Create many Personas
     * const persona = await prisma.persona.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonaCreateManyArgs>(args?: SelectSubset<T, PersonaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Personas and returns the data saved in the database.
     * @param {PersonaCreateManyAndReturnArgs} args - Arguments to create many Personas.
     * @example
     * // Create many Personas
     * const persona = await prisma.persona.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Personas and only return the `id`
     * const personaWithIdOnly = await prisma.persona.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonaCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Persona.
     * @param {PersonaDeleteArgs} args - Arguments to delete one Persona.
     * @example
     * // Delete one Persona
     * const Persona = await prisma.persona.delete({
     *   where: {
     *     // ... filter to delete one Persona
     *   }
     * })
     * 
     */
    delete<T extends PersonaDeleteArgs>(args: SelectSubset<T, PersonaDeleteArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Persona.
     * @param {PersonaUpdateArgs} args - Arguments to update one Persona.
     * @example
     * // Update one Persona
     * const persona = await prisma.persona.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonaUpdateArgs>(args: SelectSubset<T, PersonaUpdateArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Personas.
     * @param {PersonaDeleteManyArgs} args - Arguments to filter Personas to delete.
     * @example
     * // Delete a few Personas
     * const { count } = await prisma.persona.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonaDeleteManyArgs>(args?: SelectSubset<T, PersonaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Personas
     * const persona = await prisma.persona.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonaUpdateManyArgs>(args: SelectSubset<T, PersonaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personas and returns the data updated in the database.
     * @param {PersonaUpdateManyAndReturnArgs} args - Arguments to update many Personas.
     * @example
     * // Update many Personas
     * const persona = await prisma.persona.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Personas and only return the `id`
     * const personaWithIdOnly = await prisma.persona.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PersonaUpdateManyAndReturnArgs>(args: SelectSubset<T, PersonaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Persona.
     * @param {PersonaUpsertArgs} args - Arguments to update or create a Persona.
     * @example
     * // Update or create a Persona
     * const persona = await prisma.persona.upsert({
     *   create: {
     *     // ... data to create a Persona
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Persona we want to update
     *   }
     * })
     */
    upsert<T extends PersonaUpsertArgs>(args: SelectSubset<T, PersonaUpsertArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Personas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaCountArgs} args - Arguments to filter Personas to count.
     * @example
     * // Count the number of Personas
     * const count = await prisma.persona.count({
     *   where: {
     *     // ... the filter for the Personas we want to count
     *   }
     * })
    **/
    count<T extends PersonaCountArgs>(
      args?: Subset<T, PersonaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Persona.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonaAggregateArgs>(args: Subset<T, PersonaAggregateArgs>): Prisma.PrismaPromise<GetPersonaAggregateType<T>>

    /**
     * Group by Persona.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonaGroupByArgs['orderBy'] }
        : { orderBy?: PersonaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Persona model
   */
  readonly fields: PersonaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Persona.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    productos<T extends Persona$productosArgs<ExtArgs> = {}>(args?: Subset<T, Persona$productosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    servicios<T extends Persona$serviciosArgs<ExtArgs> = {}>(args?: Subset<T, Persona$serviciosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    presupuestos<T extends Persona$presupuestosArgs<ExtArgs> = {}>(args?: Subset<T, Persona$presupuestosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recibos<T extends Persona$recibosArgs<ExtArgs> = {}>(args?: Subset<T, Persona$recibosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Persona model
   */
  interface PersonaFieldRefs {
    readonly id: FieldRef<"Persona", 'Int'>
    readonly nombre: FieldRef<"Persona", 'String'>
    readonly tipo: FieldRef<"Persona", 'TipoPersona'>
    readonly telefono: FieldRef<"Persona", 'String'>
    readonly cvu: FieldRef<"Persona", 'String'>
    readonly roles: FieldRef<"Persona", 'RolUsuario[]'>
    readonly password: FieldRef<"Persona", 'String'>
    readonly email: FieldRef<"Persona", 'String'>
    readonly createdAt: FieldRef<"Persona", 'DateTime'>
    readonly updatedAt: FieldRef<"Persona", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Persona findUnique
   */
  export type PersonaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter, which Persona to fetch.
     */
    where: PersonaWhereUniqueInput
  }

  /**
   * Persona findUniqueOrThrow
   */
  export type PersonaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter, which Persona to fetch.
     */
    where: PersonaWhereUniqueInput
  }

  /**
   * Persona findFirst
   */
  export type PersonaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter, which Persona to fetch.
     */
    where?: PersonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personas to fetch.
     */
    orderBy?: PersonaOrderByWithRelationInput | PersonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personas.
     */
    cursor?: PersonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personas.
     */
    distinct?: PersonaScalarFieldEnum | PersonaScalarFieldEnum[]
  }

  /**
   * Persona findFirstOrThrow
   */
  export type PersonaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter, which Persona to fetch.
     */
    where?: PersonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personas to fetch.
     */
    orderBy?: PersonaOrderByWithRelationInput | PersonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personas.
     */
    cursor?: PersonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personas.
     */
    distinct?: PersonaScalarFieldEnum | PersonaScalarFieldEnum[]
  }

  /**
   * Persona findMany
   */
  export type PersonaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter, which Personas to fetch.
     */
    where?: PersonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personas to fetch.
     */
    orderBy?: PersonaOrderByWithRelationInput | PersonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Personas.
     */
    cursor?: PersonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personas.
     */
    skip?: number
    distinct?: PersonaScalarFieldEnum | PersonaScalarFieldEnum[]
  }

  /**
   * Persona create
   */
  export type PersonaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * The data needed to create a Persona.
     */
    data: XOR<PersonaCreateInput, PersonaUncheckedCreateInput>
  }

  /**
   * Persona createMany
   */
  export type PersonaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Personas.
     */
    data: PersonaCreateManyInput | PersonaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Persona createManyAndReturn
   */
  export type PersonaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * The data used to create many Personas.
     */
    data: PersonaCreateManyInput | PersonaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Persona update
   */
  export type PersonaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * The data needed to update a Persona.
     */
    data: XOR<PersonaUpdateInput, PersonaUncheckedUpdateInput>
    /**
     * Choose, which Persona to update.
     */
    where: PersonaWhereUniqueInput
  }

  /**
   * Persona updateMany
   */
  export type PersonaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Personas.
     */
    data: XOR<PersonaUpdateManyMutationInput, PersonaUncheckedUpdateManyInput>
    /**
     * Filter which Personas to update
     */
    where?: PersonaWhereInput
    /**
     * Limit how many Personas to update.
     */
    limit?: number
  }

  /**
   * Persona updateManyAndReturn
   */
  export type PersonaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * The data used to update Personas.
     */
    data: XOR<PersonaUpdateManyMutationInput, PersonaUncheckedUpdateManyInput>
    /**
     * Filter which Personas to update
     */
    where?: PersonaWhereInput
    /**
     * Limit how many Personas to update.
     */
    limit?: number
  }

  /**
   * Persona upsert
   */
  export type PersonaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * The filter to search for the Persona to update in case it exists.
     */
    where: PersonaWhereUniqueInput
    /**
     * In case the Persona found by the `where` argument doesn't exist, create a new Persona with this data.
     */
    create: XOR<PersonaCreateInput, PersonaUncheckedCreateInput>
    /**
     * In case the Persona was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonaUpdateInput, PersonaUncheckedUpdateInput>
  }

  /**
   * Persona delete
   */
  export type PersonaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter which Persona to delete.
     */
    where: PersonaWhereUniqueInput
  }

  /**
   * Persona deleteMany
   */
  export type PersonaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Personas to delete
     */
    where?: PersonaWhereInput
    /**
     * Limit how many Personas to delete.
     */
    limit?: number
  }

  /**
   * Persona.productos
   */
  export type Persona$productosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    where?: ProductoWhereInput
    orderBy?: ProductoOrderByWithRelationInput | ProductoOrderByWithRelationInput[]
    cursor?: ProductoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }

  /**
   * Persona.servicios
   */
  export type Persona$serviciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    where?: ServicioWhereInput
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    cursor?: ServicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Persona.presupuestos
   */
  export type Persona$presupuestosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
    where?: PresupuestoWhereInput
    orderBy?: PresupuestoOrderByWithRelationInput | PresupuestoOrderByWithRelationInput[]
    cursor?: PresupuestoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresupuestoScalarFieldEnum | PresupuestoScalarFieldEnum[]
  }

  /**
   * Persona.recibos
   */
  export type Persona$recibosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
    where?: ReciboWhereInput
    orderBy?: ReciboOrderByWithRelationInput | ReciboOrderByWithRelationInput[]
    cursor?: ReciboWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReciboScalarFieldEnum | ReciboScalarFieldEnum[]
  }

  /**
   * Persona without action
   */
  export type PersonaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Persona
     */
    omit?: PersonaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonaInclude<ExtArgs> | null
  }


  /**
   * Model Producto
   */

  export type AggregateProducto = {
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  export type ProductoAvgAggregateOutputType = {
    id: number | null
    precio: number | null
    proveedorId: number | null
  }

  export type ProductoSumAggregateOutputType = {
    id: number | null
    precio: number | null
    proveedorId: number | null
  }

  export type ProductoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    precio: number | null
    proveedorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    precio: number | null
    proveedorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductoCountAggregateOutputType = {
    id: number
    nombre: number
    precio: number
    proveedorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductoAvgAggregateInputType = {
    id?: true
    precio?: true
    proveedorId?: true
  }

  export type ProductoSumAggregateInputType = {
    id?: true
    precio?: true
    proveedorId?: true
  }

  export type ProductoMinAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
    proveedorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductoMaxAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
    proveedorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductoCountAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
    proveedorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Producto to aggregate.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductoOrderByWithRelationInput | ProductoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Productos
    **/
    _count?: true | ProductoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductoMaxAggregateInputType
  }

  export type GetProductoAggregateType<T extends ProductoAggregateArgs> = {
        [P in keyof T & keyof AggregateProducto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducto[P]>
      : GetScalarType<T[P], AggregateProducto[P]>
  }




  export type ProductoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductoWhereInput
    orderBy?: ProductoOrderByWithAggregationInput | ProductoOrderByWithAggregationInput[]
    by: ProductoScalarFieldEnum[] | ProductoScalarFieldEnum
    having?: ProductoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductoCountAggregateInputType | true
    _avg?: ProductoAvgAggregateInputType
    _sum?: ProductoSumAggregateInputType
    _min?: ProductoMinAggregateInputType
    _max?: ProductoMaxAggregateInputType
  }

  export type ProductoGroupByOutputType = {
    id: number
    nombre: string
    precio: number
    proveedorId: number
    createdAt: Date
    updatedAt: Date
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  type GetProductoGroupByPayload<T extends ProductoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductoGroupByOutputType[P]>
            : GetScalarType<T[P], ProductoGroupByOutputType[P]>
        }
      >
    >


  export type ProductoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    precio?: boolean
    proveedorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
    items?: boolean | Producto$itemsArgs<ExtArgs>
    _count?: boolean | ProductoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["producto"]>

  export type ProductoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    precio?: boolean
    proveedorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["producto"]>

  export type ProductoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    precio?: boolean
    proveedorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["producto"]>

  export type ProductoSelectScalar = {
    id?: boolean
    nombre?: boolean
    precio?: boolean
    proveedorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "precio" | "proveedorId" | "createdAt" | "updatedAt", ExtArgs["result"]["producto"]>
  export type ProductoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
    items?: boolean | Producto$itemsArgs<ExtArgs>
    _count?: boolean | ProductoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
  }
  export type ProductoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
  }

  export type $ProductoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Producto"
    objects: {
      proveedor: Prisma.$PersonaPayload<ExtArgs>
      items: Prisma.$ItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      precio: number
      proveedorId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["producto"]>
    composites: {}
  }

  type ProductoGetPayload<S extends boolean | null | undefined | ProductoDefaultArgs> = $Result.GetResult<Prisma.$ProductoPayload, S>

  type ProductoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductoCountAggregateInputType | true
    }

  export interface ProductoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Producto'], meta: { name: 'Producto' } }
    /**
     * Find zero or one Producto that matches the filter.
     * @param {ProductoFindUniqueArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductoFindUniqueArgs>(args: SelectSubset<T, ProductoFindUniqueArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Producto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductoFindUniqueOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Producto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindFirstArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductoFindFirstArgs>(args?: SelectSubset<T, ProductoFindFirstArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Producto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindFirstOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productos
     * const productos = await prisma.producto.findMany()
     * 
     * // Get first 10 Productos
     * const productos = await prisma.producto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productoWithIdOnly = await prisma.producto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductoFindManyArgs>(args?: SelectSubset<T, ProductoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Producto.
     * @param {ProductoCreateArgs} args - Arguments to create a Producto.
     * @example
     * // Create one Producto
     * const Producto = await prisma.producto.create({
     *   data: {
     *     // ... data to create a Producto
     *   }
     * })
     * 
     */
    create<T extends ProductoCreateArgs>(args: SelectSubset<T, ProductoCreateArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Productos.
     * @param {ProductoCreateManyArgs} args - Arguments to create many Productos.
     * @example
     * // Create many Productos
     * const producto = await prisma.producto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductoCreateManyArgs>(args?: SelectSubset<T, ProductoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Productos and returns the data saved in the database.
     * @param {ProductoCreateManyAndReturnArgs} args - Arguments to create many Productos.
     * @example
     * // Create many Productos
     * const producto = await prisma.producto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Productos and only return the `id`
     * const productoWithIdOnly = await prisma.producto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Producto.
     * @param {ProductoDeleteArgs} args - Arguments to delete one Producto.
     * @example
     * // Delete one Producto
     * const Producto = await prisma.producto.delete({
     *   where: {
     *     // ... filter to delete one Producto
     *   }
     * })
     * 
     */
    delete<T extends ProductoDeleteArgs>(args: SelectSubset<T, ProductoDeleteArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Producto.
     * @param {ProductoUpdateArgs} args - Arguments to update one Producto.
     * @example
     * // Update one Producto
     * const producto = await prisma.producto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductoUpdateArgs>(args: SelectSubset<T, ProductoUpdateArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Productos.
     * @param {ProductoDeleteManyArgs} args - Arguments to filter Productos to delete.
     * @example
     * // Delete a few Productos
     * const { count } = await prisma.producto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductoDeleteManyArgs>(args?: SelectSubset<T, ProductoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productos
     * const producto = await prisma.producto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductoUpdateManyArgs>(args: SelectSubset<T, ProductoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productos and returns the data updated in the database.
     * @param {ProductoUpdateManyAndReturnArgs} args - Arguments to update many Productos.
     * @example
     * // Update many Productos
     * const producto = await prisma.producto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Productos and only return the `id`
     * const productoWithIdOnly = await prisma.producto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductoUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Producto.
     * @param {ProductoUpsertArgs} args - Arguments to update or create a Producto.
     * @example
     * // Update or create a Producto
     * const producto = await prisma.producto.upsert({
     *   create: {
     *     // ... data to create a Producto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Producto we want to update
     *   }
     * })
     */
    upsert<T extends ProductoUpsertArgs>(args: SelectSubset<T, ProductoUpsertArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoCountArgs} args - Arguments to filter Productos to count.
     * @example
     * // Count the number of Productos
     * const count = await prisma.producto.count({
     *   where: {
     *     // ... the filter for the Productos we want to count
     *   }
     * })
    **/
    count<T extends ProductoCountArgs>(
      args?: Subset<T, ProductoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductoAggregateArgs>(args: Subset<T, ProductoAggregateArgs>): Prisma.PrismaPromise<GetProductoAggregateType<T>>

    /**
     * Group by Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductoGroupByArgs['orderBy'] }
        : { orderBy?: ProductoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Producto model
   */
  readonly fields: ProductoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Producto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proveedor<T extends PersonaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonaDefaultArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends Producto$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Producto$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Producto model
   */
  interface ProductoFieldRefs {
    readonly id: FieldRef<"Producto", 'Int'>
    readonly nombre: FieldRef<"Producto", 'String'>
    readonly precio: FieldRef<"Producto", 'Float'>
    readonly proveedorId: FieldRef<"Producto", 'Int'>
    readonly createdAt: FieldRef<"Producto", 'DateTime'>
    readonly updatedAt: FieldRef<"Producto", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Producto findUnique
   */
  export type ProductoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter, which Producto to fetch.
     */
    where: ProductoWhereUniqueInput
  }

  /**
   * Producto findUniqueOrThrow
   */
  export type ProductoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter, which Producto to fetch.
     */
    where: ProductoWhereUniqueInput
  }

  /**
   * Producto findFirst
   */
  export type ProductoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter, which Producto to fetch.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductoOrderByWithRelationInput | ProductoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productos.
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productos.
     */
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }

  /**
   * Producto findFirstOrThrow
   */
  export type ProductoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter, which Producto to fetch.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductoOrderByWithRelationInput | ProductoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productos.
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productos.
     */
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }

  /**
   * Producto findMany
   */
  export type ProductoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter, which Productos to fetch.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductoOrderByWithRelationInput | ProductoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Productos.
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }

  /**
   * Producto create
   */
  export type ProductoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * The data needed to create a Producto.
     */
    data: XOR<ProductoCreateInput, ProductoUncheckedCreateInput>
  }

  /**
   * Producto createMany
   */
  export type ProductoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Productos.
     */
    data: ProductoCreateManyInput | ProductoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Producto createManyAndReturn
   */
  export type ProductoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * The data used to create many Productos.
     */
    data: ProductoCreateManyInput | ProductoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Producto update
   */
  export type ProductoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * The data needed to update a Producto.
     */
    data: XOR<ProductoUpdateInput, ProductoUncheckedUpdateInput>
    /**
     * Choose, which Producto to update.
     */
    where: ProductoWhereUniqueInput
  }

  /**
   * Producto updateMany
   */
  export type ProductoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Productos.
     */
    data: XOR<ProductoUpdateManyMutationInput, ProductoUncheckedUpdateManyInput>
    /**
     * Filter which Productos to update
     */
    where?: ProductoWhereInput
    /**
     * Limit how many Productos to update.
     */
    limit?: number
  }

  /**
   * Producto updateManyAndReturn
   */
  export type ProductoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * The data used to update Productos.
     */
    data: XOR<ProductoUpdateManyMutationInput, ProductoUncheckedUpdateManyInput>
    /**
     * Filter which Productos to update
     */
    where?: ProductoWhereInput
    /**
     * Limit how many Productos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Producto upsert
   */
  export type ProductoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * The filter to search for the Producto to update in case it exists.
     */
    where: ProductoWhereUniqueInput
    /**
     * In case the Producto found by the `where` argument doesn't exist, create a new Producto with this data.
     */
    create: XOR<ProductoCreateInput, ProductoUncheckedCreateInput>
    /**
     * In case the Producto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductoUpdateInput, ProductoUncheckedUpdateInput>
  }

  /**
   * Producto delete
   */
  export type ProductoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter which Producto to delete.
     */
    where: ProductoWhereUniqueInput
  }

  /**
   * Producto deleteMany
   */
  export type ProductoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Productos to delete
     */
    where?: ProductoWhereInput
    /**
     * Limit how many Productos to delete.
     */
    limit?: number
  }

  /**
   * Producto.items
   */
  export type Producto$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Producto without action
   */
  export type ProductoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
  }


  /**
   * Model Servicio
   */

  export type AggregateServicio = {
    _count: ServicioCountAggregateOutputType | null
    _avg: ServicioAvgAggregateOutputType | null
    _sum: ServicioSumAggregateOutputType | null
    _min: ServicioMinAggregateOutputType | null
    _max: ServicioMaxAggregateOutputType | null
  }

  export type ServicioAvgAggregateOutputType = {
    id: number | null
    precio: number | null
    proveedorId: number | null
  }

  export type ServicioSumAggregateOutputType = {
    id: number | null
    precio: number | null
    proveedorId: number | null
  }

  export type ServicioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    precio: number | null
    proveedorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServicioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    precio: number | null
    proveedorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServicioCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    precio: number
    proveedorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServicioAvgAggregateInputType = {
    id?: true
    precio?: true
    proveedorId?: true
  }

  export type ServicioSumAggregateInputType = {
    id?: true
    precio?: true
    proveedorId?: true
  }

  export type ServicioMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio?: true
    proveedorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServicioMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio?: true
    proveedorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServicioCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio?: true
    proveedorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicio to aggregate.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servicios
    **/
    _count?: true | ServicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicioMaxAggregateInputType
  }

  export type GetServicioAggregateType<T extends ServicioAggregateArgs> = {
        [P in keyof T & keyof AggregateServicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServicio[P]>
      : GetScalarType<T[P], AggregateServicio[P]>
  }




  export type ServicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioWhereInput
    orderBy?: ServicioOrderByWithAggregationInput | ServicioOrderByWithAggregationInput[]
    by: ServicioScalarFieldEnum[] | ServicioScalarFieldEnum
    having?: ServicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicioCountAggregateInputType | true
    _avg?: ServicioAvgAggregateInputType
    _sum?: ServicioSumAggregateInputType
    _min?: ServicioMinAggregateInputType
    _max?: ServicioMaxAggregateInputType
  }

  export type ServicioGroupByOutputType = {
    id: number
    nombre: string
    descripcion: string
    precio: number
    proveedorId: number
    createdAt: Date
    updatedAt: Date
    _count: ServicioCountAggregateOutputType | null
    _avg: ServicioAvgAggregateOutputType | null
    _sum: ServicioSumAggregateOutputType | null
    _min: ServicioMinAggregateOutputType | null
    _max: ServicioMaxAggregateOutputType | null
  }

  type GetServicioGroupByPayload<T extends ServicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicioGroupByOutputType[P]>
            : GetScalarType<T[P], ServicioGroupByOutputType[P]>
        }
      >
    >


  export type ServicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio?: boolean
    proveedorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
    items?: boolean | Servicio$itemsArgs<ExtArgs>
    _count?: boolean | ServicioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio?: boolean
    proveedorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio?: boolean
    proveedorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio?: boolean
    proveedorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServicioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "descripcion" | "precio" | "proveedorId" | "createdAt" | "updatedAt", ExtArgs["result"]["servicio"]>
  export type ServicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
    items?: boolean | Servicio$itemsArgs<ExtArgs>
    _count?: boolean | ServicioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServicioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
  }
  export type ServicioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proveedor?: boolean | PersonaDefaultArgs<ExtArgs>
  }

  export type $ServicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Servicio"
    objects: {
      proveedor: Prisma.$PersonaPayload<ExtArgs>
      items: Prisma.$ItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      descripcion: string
      precio: number
      proveedorId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["servicio"]>
    composites: {}
  }

  type ServicioGetPayload<S extends boolean | null | undefined | ServicioDefaultArgs> = $Result.GetResult<Prisma.$ServicioPayload, S>

  type ServicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServicioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServicioCountAggregateInputType | true
    }

  export interface ServicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Servicio'], meta: { name: 'Servicio' } }
    /**
     * Find zero or one Servicio that matches the filter.
     * @param {ServicioFindUniqueArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServicioFindUniqueArgs>(args: SelectSubset<T, ServicioFindUniqueArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Servicio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServicioFindUniqueOrThrowArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServicioFindUniqueOrThrowArgs>(args: SelectSubset<T, ServicioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Servicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindFirstArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServicioFindFirstArgs>(args?: SelectSubset<T, ServicioFindFirstArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Servicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindFirstOrThrowArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServicioFindFirstOrThrowArgs>(args?: SelectSubset<T, ServicioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Servicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servicios
     * const servicios = await prisma.servicio.findMany()
     * 
     * // Get first 10 Servicios
     * const servicios = await prisma.servicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicioWithIdOnly = await prisma.servicio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServicioFindManyArgs>(args?: SelectSubset<T, ServicioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Servicio.
     * @param {ServicioCreateArgs} args - Arguments to create a Servicio.
     * @example
     * // Create one Servicio
     * const Servicio = await prisma.servicio.create({
     *   data: {
     *     // ... data to create a Servicio
     *   }
     * })
     * 
     */
    create<T extends ServicioCreateArgs>(args: SelectSubset<T, ServicioCreateArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Servicios.
     * @param {ServicioCreateManyArgs} args - Arguments to create many Servicios.
     * @example
     * // Create many Servicios
     * const servicio = await prisma.servicio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServicioCreateManyArgs>(args?: SelectSubset<T, ServicioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Servicios and returns the data saved in the database.
     * @param {ServicioCreateManyAndReturnArgs} args - Arguments to create many Servicios.
     * @example
     * // Create many Servicios
     * const servicio = await prisma.servicio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Servicios and only return the `id`
     * const servicioWithIdOnly = await prisma.servicio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServicioCreateManyAndReturnArgs>(args?: SelectSubset<T, ServicioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Servicio.
     * @param {ServicioDeleteArgs} args - Arguments to delete one Servicio.
     * @example
     * // Delete one Servicio
     * const Servicio = await prisma.servicio.delete({
     *   where: {
     *     // ... filter to delete one Servicio
     *   }
     * })
     * 
     */
    delete<T extends ServicioDeleteArgs>(args: SelectSubset<T, ServicioDeleteArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Servicio.
     * @param {ServicioUpdateArgs} args - Arguments to update one Servicio.
     * @example
     * // Update one Servicio
     * const servicio = await prisma.servicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServicioUpdateArgs>(args: SelectSubset<T, ServicioUpdateArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Servicios.
     * @param {ServicioDeleteManyArgs} args - Arguments to filter Servicios to delete.
     * @example
     * // Delete a few Servicios
     * const { count } = await prisma.servicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServicioDeleteManyArgs>(args?: SelectSubset<T, ServicioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servicios
     * const servicio = await prisma.servicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServicioUpdateManyArgs>(args: SelectSubset<T, ServicioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicios and returns the data updated in the database.
     * @param {ServicioUpdateManyAndReturnArgs} args - Arguments to update many Servicios.
     * @example
     * // Update many Servicios
     * const servicio = await prisma.servicio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Servicios and only return the `id`
     * const servicioWithIdOnly = await prisma.servicio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServicioUpdateManyAndReturnArgs>(args: SelectSubset<T, ServicioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Servicio.
     * @param {ServicioUpsertArgs} args - Arguments to update or create a Servicio.
     * @example
     * // Update or create a Servicio
     * const servicio = await prisma.servicio.upsert({
     *   create: {
     *     // ... data to create a Servicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servicio we want to update
     *   }
     * })
     */
    upsert<T extends ServicioUpsertArgs>(args: SelectSubset<T, ServicioUpsertArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioCountArgs} args - Arguments to filter Servicios to count.
     * @example
     * // Count the number of Servicios
     * const count = await prisma.servicio.count({
     *   where: {
     *     // ... the filter for the Servicios we want to count
     *   }
     * })
    **/
    count<T extends ServicioCountArgs>(
      args?: Subset<T, ServicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicioAggregateArgs>(args: Subset<T, ServicioAggregateArgs>): Prisma.PrismaPromise<GetServicioAggregateType<T>>

    /**
     * Group by Servicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicioGroupByArgs['orderBy'] }
        : { orderBy?: ServicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Servicio model
   */
  readonly fields: ServicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Servicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proveedor<T extends PersonaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonaDefaultArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends Servicio$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Servicio$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Servicio model
   */
  interface ServicioFieldRefs {
    readonly id: FieldRef<"Servicio", 'Int'>
    readonly nombre: FieldRef<"Servicio", 'String'>
    readonly descripcion: FieldRef<"Servicio", 'String'>
    readonly precio: FieldRef<"Servicio", 'Float'>
    readonly proveedorId: FieldRef<"Servicio", 'Int'>
    readonly createdAt: FieldRef<"Servicio", 'DateTime'>
    readonly updatedAt: FieldRef<"Servicio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Servicio findUnique
   */
  export type ServicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio findUniqueOrThrow
   */
  export type ServicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio findFirst
   */
  export type ServicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicios.
     */
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio findFirstOrThrow
   */
  export type ServicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicios.
     */
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio findMany
   */
  export type ServicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicios to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio create
   */
  export type ServicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The data needed to create a Servicio.
     */
    data: XOR<ServicioCreateInput, ServicioUncheckedCreateInput>
  }

  /**
   * Servicio createMany
   */
  export type ServicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servicios.
     */
    data: ServicioCreateManyInput | ServicioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Servicio createManyAndReturn
   */
  export type ServicioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * The data used to create many Servicios.
     */
    data: ServicioCreateManyInput | ServicioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Servicio update
   */
  export type ServicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The data needed to update a Servicio.
     */
    data: XOR<ServicioUpdateInput, ServicioUncheckedUpdateInput>
    /**
     * Choose, which Servicio to update.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio updateMany
   */
  export type ServicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servicios.
     */
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyInput>
    /**
     * Filter which Servicios to update
     */
    where?: ServicioWhereInput
    /**
     * Limit how many Servicios to update.
     */
    limit?: number
  }

  /**
   * Servicio updateManyAndReturn
   */
  export type ServicioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * The data used to update Servicios.
     */
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyInput>
    /**
     * Filter which Servicios to update
     */
    where?: ServicioWhereInput
    /**
     * Limit how many Servicios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Servicio upsert
   */
  export type ServicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The filter to search for the Servicio to update in case it exists.
     */
    where: ServicioWhereUniqueInput
    /**
     * In case the Servicio found by the `where` argument doesn't exist, create a new Servicio with this data.
     */
    create: XOR<ServicioCreateInput, ServicioUncheckedCreateInput>
    /**
     * In case the Servicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicioUpdateInput, ServicioUncheckedUpdateInput>
  }

  /**
   * Servicio delete
   */
  export type ServicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter which Servicio to delete.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio deleteMany
   */
  export type ServicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicios to delete
     */
    where?: ServicioWhereInput
    /**
     * Limit how many Servicios to delete.
     */
    limit?: number
  }

  /**
   * Servicio.items
   */
  export type Servicio$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Servicio without action
   */
  export type ServicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
  }


  /**
   * Model Presupuesto
   */

  export type AggregatePresupuesto = {
    _count: PresupuestoCountAggregateOutputType | null
    _avg: PresupuestoAvgAggregateOutputType | null
    _sum: PresupuestoSumAggregateOutputType | null
    _min: PresupuestoMinAggregateOutputType | null
    _max: PresupuestoMaxAggregateOutputType | null
  }

  export type PresupuestoAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    subtotal: number | null
    impuestos: number | null
    total: number | null
  }

  export type PresupuestoSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    subtotal: number | null
    impuestos: number | null
    total: number | null
  }

  export type PresupuestoMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    subtotal: number | null
    impuestos: number | null
    total: number | null
    estado: $Enums.EstadoPresupuesto | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PresupuestoMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    subtotal: number | null
    impuestos: number | null
    total: number | null
    estado: $Enums.EstadoPresupuesto | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PresupuestoCountAggregateOutputType = {
    id: number
    clienteId: number
    subtotal: number
    impuestos: number
    total: number
    estado: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PresupuestoAvgAggregateInputType = {
    id?: true
    clienteId?: true
    subtotal?: true
    impuestos?: true
    total?: true
  }

  export type PresupuestoSumAggregateInputType = {
    id?: true
    clienteId?: true
    subtotal?: true
    impuestos?: true
    total?: true
  }

  export type PresupuestoMinAggregateInputType = {
    id?: true
    clienteId?: true
    subtotal?: true
    impuestos?: true
    total?: true
    estado?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PresupuestoMaxAggregateInputType = {
    id?: true
    clienteId?: true
    subtotal?: true
    impuestos?: true
    total?: true
    estado?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PresupuestoCountAggregateInputType = {
    id?: true
    clienteId?: true
    subtotal?: true
    impuestos?: true
    total?: true
    estado?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PresupuestoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presupuesto to aggregate.
     */
    where?: PresupuestoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presupuestos to fetch.
     */
    orderBy?: PresupuestoOrderByWithRelationInput | PresupuestoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PresupuestoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presupuestos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presupuestos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Presupuestos
    **/
    _count?: true | PresupuestoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PresupuestoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PresupuestoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PresupuestoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PresupuestoMaxAggregateInputType
  }

  export type GetPresupuestoAggregateType<T extends PresupuestoAggregateArgs> = {
        [P in keyof T & keyof AggregatePresupuesto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresupuesto[P]>
      : GetScalarType<T[P], AggregatePresupuesto[P]>
  }




  export type PresupuestoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresupuestoWhereInput
    orderBy?: PresupuestoOrderByWithAggregationInput | PresupuestoOrderByWithAggregationInput[]
    by: PresupuestoScalarFieldEnum[] | PresupuestoScalarFieldEnum
    having?: PresupuestoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PresupuestoCountAggregateInputType | true
    _avg?: PresupuestoAvgAggregateInputType
    _sum?: PresupuestoSumAggregateInputType
    _min?: PresupuestoMinAggregateInputType
    _max?: PresupuestoMaxAggregateInputType
  }

  export type PresupuestoGroupByOutputType = {
    id: number
    clienteId: number
    subtotal: number
    impuestos: number
    total: number
    estado: $Enums.EstadoPresupuesto
    createdAt: Date
    updatedAt: Date
    _count: PresupuestoCountAggregateOutputType | null
    _avg: PresupuestoAvgAggregateOutputType | null
    _sum: PresupuestoSumAggregateOutputType | null
    _min: PresupuestoMinAggregateOutputType | null
    _max: PresupuestoMaxAggregateOutputType | null
  }

  type GetPresupuestoGroupByPayload<T extends PresupuestoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PresupuestoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PresupuestoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PresupuestoGroupByOutputType[P]>
            : GetScalarType<T[P], PresupuestoGroupByOutputType[P]>
        }
      >
    >


  export type PresupuestoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    subtotal?: boolean
    impuestos?: boolean
    total?: boolean
    estado?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cliente?: boolean | PersonaDefaultArgs<ExtArgs>
    items?: boolean | Presupuesto$itemsArgs<ExtArgs>
    factura?: boolean | Presupuesto$facturaArgs<ExtArgs>
    _count?: boolean | PresupuestoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presupuesto"]>

  export type PresupuestoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    subtotal?: boolean
    impuestos?: boolean
    total?: boolean
    estado?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cliente?: boolean | PersonaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presupuesto"]>

  export type PresupuestoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    subtotal?: boolean
    impuestos?: boolean
    total?: boolean
    estado?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cliente?: boolean | PersonaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presupuesto"]>

  export type PresupuestoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    subtotal?: boolean
    impuestos?: boolean
    total?: boolean
    estado?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PresupuestoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clienteId" | "subtotal" | "impuestos" | "total" | "estado" | "createdAt" | "updatedAt", ExtArgs["result"]["presupuesto"]>
  export type PresupuestoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | PersonaDefaultArgs<ExtArgs>
    items?: boolean | Presupuesto$itemsArgs<ExtArgs>
    factura?: boolean | Presupuesto$facturaArgs<ExtArgs>
    _count?: boolean | PresupuestoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PresupuestoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | PersonaDefaultArgs<ExtArgs>
  }
  export type PresupuestoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | PersonaDefaultArgs<ExtArgs>
  }

  export type $PresupuestoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Presupuesto"
    objects: {
      cliente: Prisma.$PersonaPayload<ExtArgs>
      items: Prisma.$ItemPayload<ExtArgs>[]
      factura: Prisma.$FacturaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clienteId: number
      subtotal: number
      impuestos: number
      total: number
      estado: $Enums.EstadoPresupuesto
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["presupuesto"]>
    composites: {}
  }

  type PresupuestoGetPayload<S extends boolean | null | undefined | PresupuestoDefaultArgs> = $Result.GetResult<Prisma.$PresupuestoPayload, S>

  type PresupuestoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PresupuestoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PresupuestoCountAggregateInputType | true
    }

  export interface PresupuestoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Presupuesto'], meta: { name: 'Presupuesto' } }
    /**
     * Find zero or one Presupuesto that matches the filter.
     * @param {PresupuestoFindUniqueArgs} args - Arguments to find a Presupuesto
     * @example
     * // Get one Presupuesto
     * const presupuesto = await prisma.presupuesto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PresupuestoFindUniqueArgs>(args: SelectSubset<T, PresupuestoFindUniqueArgs<ExtArgs>>): Prisma__PresupuestoClient<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Presupuesto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PresupuestoFindUniqueOrThrowArgs} args - Arguments to find a Presupuesto
     * @example
     * // Get one Presupuesto
     * const presupuesto = await prisma.presupuesto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PresupuestoFindUniqueOrThrowArgs>(args: SelectSubset<T, PresupuestoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PresupuestoClient<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presupuesto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresupuestoFindFirstArgs} args - Arguments to find a Presupuesto
     * @example
     * // Get one Presupuesto
     * const presupuesto = await prisma.presupuesto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PresupuestoFindFirstArgs>(args?: SelectSubset<T, PresupuestoFindFirstArgs<ExtArgs>>): Prisma__PresupuestoClient<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presupuesto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresupuestoFindFirstOrThrowArgs} args - Arguments to find a Presupuesto
     * @example
     * // Get one Presupuesto
     * const presupuesto = await prisma.presupuesto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PresupuestoFindFirstOrThrowArgs>(args?: SelectSubset<T, PresupuestoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PresupuestoClient<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Presupuestos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresupuestoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Presupuestos
     * const presupuestos = await prisma.presupuesto.findMany()
     * 
     * // Get first 10 Presupuestos
     * const presupuestos = await prisma.presupuesto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presupuestoWithIdOnly = await prisma.presupuesto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PresupuestoFindManyArgs>(args?: SelectSubset<T, PresupuestoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Presupuesto.
     * @param {PresupuestoCreateArgs} args - Arguments to create a Presupuesto.
     * @example
     * // Create one Presupuesto
     * const Presupuesto = await prisma.presupuesto.create({
     *   data: {
     *     // ... data to create a Presupuesto
     *   }
     * })
     * 
     */
    create<T extends PresupuestoCreateArgs>(args: SelectSubset<T, PresupuestoCreateArgs<ExtArgs>>): Prisma__PresupuestoClient<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Presupuestos.
     * @param {PresupuestoCreateManyArgs} args - Arguments to create many Presupuestos.
     * @example
     * // Create many Presupuestos
     * const presupuesto = await prisma.presupuesto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PresupuestoCreateManyArgs>(args?: SelectSubset<T, PresupuestoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Presupuestos and returns the data saved in the database.
     * @param {PresupuestoCreateManyAndReturnArgs} args - Arguments to create many Presupuestos.
     * @example
     * // Create many Presupuestos
     * const presupuesto = await prisma.presupuesto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Presupuestos and only return the `id`
     * const presupuestoWithIdOnly = await prisma.presupuesto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PresupuestoCreateManyAndReturnArgs>(args?: SelectSubset<T, PresupuestoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Presupuesto.
     * @param {PresupuestoDeleteArgs} args - Arguments to delete one Presupuesto.
     * @example
     * // Delete one Presupuesto
     * const Presupuesto = await prisma.presupuesto.delete({
     *   where: {
     *     // ... filter to delete one Presupuesto
     *   }
     * })
     * 
     */
    delete<T extends PresupuestoDeleteArgs>(args: SelectSubset<T, PresupuestoDeleteArgs<ExtArgs>>): Prisma__PresupuestoClient<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Presupuesto.
     * @param {PresupuestoUpdateArgs} args - Arguments to update one Presupuesto.
     * @example
     * // Update one Presupuesto
     * const presupuesto = await prisma.presupuesto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PresupuestoUpdateArgs>(args: SelectSubset<T, PresupuestoUpdateArgs<ExtArgs>>): Prisma__PresupuestoClient<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Presupuestos.
     * @param {PresupuestoDeleteManyArgs} args - Arguments to filter Presupuestos to delete.
     * @example
     * // Delete a few Presupuestos
     * const { count } = await prisma.presupuesto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PresupuestoDeleteManyArgs>(args?: SelectSubset<T, PresupuestoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presupuestos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresupuestoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Presupuestos
     * const presupuesto = await prisma.presupuesto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PresupuestoUpdateManyArgs>(args: SelectSubset<T, PresupuestoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presupuestos and returns the data updated in the database.
     * @param {PresupuestoUpdateManyAndReturnArgs} args - Arguments to update many Presupuestos.
     * @example
     * // Update many Presupuestos
     * const presupuesto = await prisma.presupuesto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Presupuestos and only return the `id`
     * const presupuestoWithIdOnly = await prisma.presupuesto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PresupuestoUpdateManyAndReturnArgs>(args: SelectSubset<T, PresupuestoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Presupuesto.
     * @param {PresupuestoUpsertArgs} args - Arguments to update or create a Presupuesto.
     * @example
     * // Update or create a Presupuesto
     * const presupuesto = await prisma.presupuesto.upsert({
     *   create: {
     *     // ... data to create a Presupuesto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Presupuesto we want to update
     *   }
     * })
     */
    upsert<T extends PresupuestoUpsertArgs>(args: SelectSubset<T, PresupuestoUpsertArgs<ExtArgs>>): Prisma__PresupuestoClient<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Presupuestos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresupuestoCountArgs} args - Arguments to filter Presupuestos to count.
     * @example
     * // Count the number of Presupuestos
     * const count = await prisma.presupuesto.count({
     *   where: {
     *     // ... the filter for the Presupuestos we want to count
     *   }
     * })
    **/
    count<T extends PresupuestoCountArgs>(
      args?: Subset<T, PresupuestoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PresupuestoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Presupuesto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresupuestoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PresupuestoAggregateArgs>(args: Subset<T, PresupuestoAggregateArgs>): Prisma.PrismaPromise<GetPresupuestoAggregateType<T>>

    /**
     * Group by Presupuesto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresupuestoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PresupuestoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PresupuestoGroupByArgs['orderBy'] }
        : { orderBy?: PresupuestoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PresupuestoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresupuestoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Presupuesto model
   */
  readonly fields: PresupuestoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Presupuesto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PresupuestoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends PersonaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonaDefaultArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends Presupuesto$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Presupuesto$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    factura<T extends Presupuesto$facturaArgs<ExtArgs> = {}>(args?: Subset<T, Presupuesto$facturaArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Presupuesto model
   */
  interface PresupuestoFieldRefs {
    readonly id: FieldRef<"Presupuesto", 'Int'>
    readonly clienteId: FieldRef<"Presupuesto", 'Int'>
    readonly subtotal: FieldRef<"Presupuesto", 'Float'>
    readonly impuestos: FieldRef<"Presupuesto", 'Float'>
    readonly total: FieldRef<"Presupuesto", 'Float'>
    readonly estado: FieldRef<"Presupuesto", 'EstadoPresupuesto'>
    readonly createdAt: FieldRef<"Presupuesto", 'DateTime'>
    readonly updatedAt: FieldRef<"Presupuesto", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Presupuesto findUnique
   */
  export type PresupuestoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
    /**
     * Filter, which Presupuesto to fetch.
     */
    where: PresupuestoWhereUniqueInput
  }

  /**
   * Presupuesto findUniqueOrThrow
   */
  export type PresupuestoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
    /**
     * Filter, which Presupuesto to fetch.
     */
    where: PresupuestoWhereUniqueInput
  }

  /**
   * Presupuesto findFirst
   */
  export type PresupuestoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
    /**
     * Filter, which Presupuesto to fetch.
     */
    where?: PresupuestoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presupuestos to fetch.
     */
    orderBy?: PresupuestoOrderByWithRelationInput | PresupuestoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presupuestos.
     */
    cursor?: PresupuestoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presupuestos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presupuestos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presupuestos.
     */
    distinct?: PresupuestoScalarFieldEnum | PresupuestoScalarFieldEnum[]
  }

  /**
   * Presupuesto findFirstOrThrow
   */
  export type PresupuestoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
    /**
     * Filter, which Presupuesto to fetch.
     */
    where?: PresupuestoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presupuestos to fetch.
     */
    orderBy?: PresupuestoOrderByWithRelationInput | PresupuestoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presupuestos.
     */
    cursor?: PresupuestoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presupuestos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presupuestos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presupuestos.
     */
    distinct?: PresupuestoScalarFieldEnum | PresupuestoScalarFieldEnum[]
  }

  /**
   * Presupuesto findMany
   */
  export type PresupuestoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
    /**
     * Filter, which Presupuestos to fetch.
     */
    where?: PresupuestoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presupuestos to fetch.
     */
    orderBy?: PresupuestoOrderByWithRelationInput | PresupuestoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Presupuestos.
     */
    cursor?: PresupuestoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presupuestos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presupuestos.
     */
    skip?: number
    distinct?: PresupuestoScalarFieldEnum | PresupuestoScalarFieldEnum[]
  }

  /**
   * Presupuesto create
   */
  export type PresupuestoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
    /**
     * The data needed to create a Presupuesto.
     */
    data: XOR<PresupuestoCreateInput, PresupuestoUncheckedCreateInput>
  }

  /**
   * Presupuesto createMany
   */
  export type PresupuestoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Presupuestos.
     */
    data: PresupuestoCreateManyInput | PresupuestoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Presupuesto createManyAndReturn
   */
  export type PresupuestoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * The data used to create many Presupuestos.
     */
    data: PresupuestoCreateManyInput | PresupuestoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Presupuesto update
   */
  export type PresupuestoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
    /**
     * The data needed to update a Presupuesto.
     */
    data: XOR<PresupuestoUpdateInput, PresupuestoUncheckedUpdateInput>
    /**
     * Choose, which Presupuesto to update.
     */
    where: PresupuestoWhereUniqueInput
  }

  /**
   * Presupuesto updateMany
   */
  export type PresupuestoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Presupuestos.
     */
    data: XOR<PresupuestoUpdateManyMutationInput, PresupuestoUncheckedUpdateManyInput>
    /**
     * Filter which Presupuestos to update
     */
    where?: PresupuestoWhereInput
    /**
     * Limit how many Presupuestos to update.
     */
    limit?: number
  }

  /**
   * Presupuesto updateManyAndReturn
   */
  export type PresupuestoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * The data used to update Presupuestos.
     */
    data: XOR<PresupuestoUpdateManyMutationInput, PresupuestoUncheckedUpdateManyInput>
    /**
     * Filter which Presupuestos to update
     */
    where?: PresupuestoWhereInput
    /**
     * Limit how many Presupuestos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Presupuesto upsert
   */
  export type PresupuestoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
    /**
     * The filter to search for the Presupuesto to update in case it exists.
     */
    where: PresupuestoWhereUniqueInput
    /**
     * In case the Presupuesto found by the `where` argument doesn't exist, create a new Presupuesto with this data.
     */
    create: XOR<PresupuestoCreateInput, PresupuestoUncheckedCreateInput>
    /**
     * In case the Presupuesto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PresupuestoUpdateInput, PresupuestoUncheckedUpdateInput>
  }

  /**
   * Presupuesto delete
   */
  export type PresupuestoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
    /**
     * Filter which Presupuesto to delete.
     */
    where: PresupuestoWhereUniqueInput
  }

  /**
   * Presupuesto deleteMany
   */
  export type PresupuestoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presupuestos to delete
     */
    where?: PresupuestoWhereInput
    /**
     * Limit how many Presupuestos to delete.
     */
    limit?: number
  }

  /**
   * Presupuesto.items
   */
  export type Presupuesto$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Presupuesto.factura
   */
  export type Presupuesto$facturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    where?: FacturaWhereInput
  }

  /**
   * Presupuesto without action
   */
  export type PresupuestoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presupuesto
     */
    select?: PresupuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presupuesto
     */
    omit?: PresupuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresupuestoInclude<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    id: number | null
    presupuestoId: number | null
    productoId: number | null
    servicioId: number | null
    cantidad: number | null
    precioUnitario: number | null
  }

  export type ItemSumAggregateOutputType = {
    id: number | null
    presupuestoId: number | null
    productoId: number | null
    servicioId: number | null
    cantidad: number | null
    precioUnitario: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: number | null
    presupuestoId: number | null
    productoId: number | null
    servicioId: number | null
    cantidad: number | null
    precioUnitario: number | null
  }

  export type ItemMaxAggregateOutputType = {
    id: number | null
    presupuestoId: number | null
    productoId: number | null
    servicioId: number | null
    cantidad: number | null
    precioUnitario: number | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    presupuestoId: number
    productoId: number
    servicioId: number
    cantidad: number
    precioUnitario: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    id?: true
    presupuestoId?: true
    productoId?: true
    servicioId?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type ItemSumAggregateInputType = {
    id?: true
    presupuestoId?: true
    productoId?: true
    servicioId?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    presupuestoId?: true
    productoId?: true
    servicioId?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    presupuestoId?: true
    productoId?: true
    servicioId?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    presupuestoId?: true
    productoId?: true
    servicioId?: true
    cantidad?: true
    precioUnitario?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: number
    presupuestoId: number
    productoId: number | null
    servicioId: number | null
    cantidad: number
    precioUnitario: number
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    presupuestoId?: boolean
    productoId?: boolean
    servicioId?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    producto?: boolean | Item$productoArgs<ExtArgs>
    servicio?: boolean | Item$servicioArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type ItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    presupuestoId?: boolean
    productoId?: boolean
    servicioId?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    producto?: boolean | Item$productoArgs<ExtArgs>
    servicio?: boolean | Item$servicioArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type ItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    presupuestoId?: boolean
    productoId?: boolean
    servicioId?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    producto?: boolean | Item$productoArgs<ExtArgs>
    servicio?: boolean | Item$servicioArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type ItemSelectScalar = {
    id?: boolean
    presupuestoId?: boolean
    productoId?: boolean
    servicioId?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
  }

  export type ItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "presupuestoId" | "productoId" | "servicioId" | "cantidad" | "precioUnitario", ExtArgs["result"]["item"]>
  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    producto?: boolean | Item$productoArgs<ExtArgs>
    servicio?: boolean | Item$servicioArgs<ExtArgs>
  }
  export type ItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    producto?: boolean | Item$productoArgs<ExtArgs>
    servicio?: boolean | Item$servicioArgs<ExtArgs>
  }
  export type ItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    producto?: boolean | Item$productoArgs<ExtArgs>
    servicio?: boolean | Item$servicioArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      presupuesto: Prisma.$PresupuestoPayload<ExtArgs>
      producto: Prisma.$ProductoPayload<ExtArgs> | null
      servicio: Prisma.$ServicioPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      presupuestoId: number
      productoId: number | null
      servicioId: number | null
      cantidad: number
      precioUnitario: number
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemFindUniqueArgs>(args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemFindFirstArgs>(args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemFindManyArgs>(args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
     */
    create<T extends ItemCreateArgs>(args: SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemCreateManyArgs>(args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Items and returns the data saved in the database.
     * @param {ItemCreateManyAndReturnArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Items and only return the `id`
     * const itemWithIdOnly = await prisma.item.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
     */
    delete<T extends ItemDeleteArgs>(args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemUpdateArgs>(args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemDeleteManyArgs>(args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemUpdateManyArgs>(args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items and returns the data updated in the database.
     * @param {ItemUpdateManyAndReturnArgs} args - Arguments to update many Items.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Items and only return the `id`
     * const itemWithIdOnly = await prisma.item.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ItemUpdateManyAndReturnArgs>(args: SelectSubset<T, ItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
     */
    upsert<T extends ItemUpsertArgs>(args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    presupuesto<T extends PresupuestoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PresupuestoDefaultArgs<ExtArgs>>): Prisma__PresupuestoClient<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    producto<T extends Item$productoArgs<ExtArgs> = {}>(args?: Subset<T, Item$productoArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    servicio<T extends Item$servicioArgs<ExtArgs> = {}>(args?: Subset<T, Item$servicioArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Item model
   */
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'Int'>
    readonly presupuestoId: FieldRef<"Item", 'Int'>
    readonly productoId: FieldRef<"Item", 'Int'>
    readonly servicioId: FieldRef<"Item", 'Int'>
    readonly cantidad: FieldRef<"Item", 'Int'>
    readonly precioUnitario: FieldRef<"Item", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Item createManyAndReturn
   */
  export type ItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
    /**
     * Limit how many Items to update.
     */
    limit?: number
  }

  /**
   * Item updateManyAndReturn
   */
  export type ItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
    /**
     * Limit how many Items to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
    /**
     * Limit how many Items to delete.
     */
    limit?: number
  }

  /**
   * Item.producto
   */
  export type Item$productoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    where?: ProductoWhereInput
  }

  /**
   * Item.servicio
   */
  export type Item$servicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servicio
     */
    omit?: ServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    where?: ServicioWhereInput
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model Factura
   */

  export type AggregateFactura = {
    _count: FacturaCountAggregateOutputType | null
    _avg: FacturaAvgAggregateOutputType | null
    _sum: FacturaSumAggregateOutputType | null
    _min: FacturaMinAggregateOutputType | null
    _max: FacturaMaxAggregateOutputType | null
  }

  export type FacturaAvgAggregateOutputType = {
    id: number | null
    presupuestoId: number | null
    subtotal: number | null
    impuestos: number | null
    total: number | null
    impuestoAplicadoId: number | null
  }

  export type FacturaSumAggregateOutputType = {
    id: number | null
    presupuestoId: number | null
    subtotal: number | null
    impuestos: number | null
    total: number | null
    impuestoAplicadoId: number | null
  }

  export type FacturaMinAggregateOutputType = {
    id: number | null
    numero: string | null
    presupuestoId: number | null
    fecha: Date | null
    subtotal: number | null
    impuestos: number | null
    total: number | null
    estado: $Enums.EstadoFactura | null
    impuestoAplicadoId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacturaMaxAggregateOutputType = {
    id: number | null
    numero: string | null
    presupuestoId: number | null
    fecha: Date | null
    subtotal: number | null
    impuestos: number | null
    total: number | null
    estado: $Enums.EstadoFactura | null
    impuestoAplicadoId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacturaCountAggregateOutputType = {
    id: number
    numero: number
    presupuestoId: number
    fecha: number
    subtotal: number
    impuestos: number
    total: number
    estado: number
    impuestoAplicadoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacturaAvgAggregateInputType = {
    id?: true
    presupuestoId?: true
    subtotal?: true
    impuestos?: true
    total?: true
    impuestoAplicadoId?: true
  }

  export type FacturaSumAggregateInputType = {
    id?: true
    presupuestoId?: true
    subtotal?: true
    impuestos?: true
    total?: true
    impuestoAplicadoId?: true
  }

  export type FacturaMinAggregateInputType = {
    id?: true
    numero?: true
    presupuestoId?: true
    fecha?: true
    subtotal?: true
    impuestos?: true
    total?: true
    estado?: true
    impuestoAplicadoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacturaMaxAggregateInputType = {
    id?: true
    numero?: true
    presupuestoId?: true
    fecha?: true
    subtotal?: true
    impuestos?: true
    total?: true
    estado?: true
    impuestoAplicadoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacturaCountAggregateInputType = {
    id?: true
    numero?: true
    presupuestoId?: true
    fecha?: true
    subtotal?: true
    impuestos?: true
    total?: true
    estado?: true
    impuestoAplicadoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacturaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Factura to aggregate.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Facturas
    **/
    _count?: true | FacturaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacturaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacturaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacturaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacturaMaxAggregateInputType
  }

  export type GetFacturaAggregateType<T extends FacturaAggregateArgs> = {
        [P in keyof T & keyof AggregateFactura]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFactura[P]>
      : GetScalarType<T[P], AggregateFactura[P]>
  }




  export type FacturaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaWhereInput
    orderBy?: FacturaOrderByWithAggregationInput | FacturaOrderByWithAggregationInput[]
    by: FacturaScalarFieldEnum[] | FacturaScalarFieldEnum
    having?: FacturaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacturaCountAggregateInputType | true
    _avg?: FacturaAvgAggregateInputType
    _sum?: FacturaSumAggregateInputType
    _min?: FacturaMinAggregateInputType
    _max?: FacturaMaxAggregateInputType
  }

  export type FacturaGroupByOutputType = {
    id: number
    numero: string
    presupuestoId: number
    fecha: Date
    subtotal: number
    impuestos: number
    total: number
    estado: $Enums.EstadoFactura
    impuestoAplicadoId: number
    createdAt: Date
    updatedAt: Date
    _count: FacturaCountAggregateOutputType | null
    _avg: FacturaAvgAggregateOutputType | null
    _sum: FacturaSumAggregateOutputType | null
    _min: FacturaMinAggregateOutputType | null
    _max: FacturaMaxAggregateOutputType | null
  }

  type GetFacturaGroupByPayload<T extends FacturaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacturaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacturaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacturaGroupByOutputType[P]>
            : GetScalarType<T[P], FacturaGroupByOutputType[P]>
        }
      >
    >


  export type FacturaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    presupuestoId?: boolean
    fecha?: boolean
    subtotal?: boolean
    impuestos?: boolean
    total?: boolean
    estado?: boolean
    impuestoAplicadoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    impuestoAplicado?: boolean | ImpuestoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factura"]>

  export type FacturaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    presupuestoId?: boolean
    fecha?: boolean
    subtotal?: boolean
    impuestos?: boolean
    total?: boolean
    estado?: boolean
    impuestoAplicadoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    impuestoAplicado?: boolean | ImpuestoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factura"]>

  export type FacturaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    presupuestoId?: boolean
    fecha?: boolean
    subtotal?: boolean
    impuestos?: boolean
    total?: boolean
    estado?: boolean
    impuestoAplicadoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    impuestoAplicado?: boolean | ImpuestoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factura"]>

  export type FacturaSelectScalar = {
    id?: boolean
    numero?: boolean
    presupuestoId?: boolean
    fecha?: boolean
    subtotal?: boolean
    impuestos?: boolean
    total?: boolean
    estado?: boolean
    impuestoAplicadoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FacturaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "numero" | "presupuestoId" | "fecha" | "subtotal" | "impuestos" | "total" | "estado" | "impuestoAplicadoId" | "createdAt" | "updatedAt", ExtArgs["result"]["factura"]>
  export type FacturaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    impuestoAplicado?: boolean | ImpuestoDefaultArgs<ExtArgs>
  }
  export type FacturaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    impuestoAplicado?: boolean | ImpuestoDefaultArgs<ExtArgs>
  }
  export type FacturaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presupuesto?: boolean | PresupuestoDefaultArgs<ExtArgs>
    impuestoAplicado?: boolean | ImpuestoDefaultArgs<ExtArgs>
  }

  export type $FacturaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Factura"
    objects: {
      presupuesto: Prisma.$PresupuestoPayload<ExtArgs>
      impuestoAplicado: Prisma.$ImpuestoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      numero: string
      presupuestoId: number
      fecha: Date
      subtotal: number
      impuestos: number
      total: number
      estado: $Enums.EstadoFactura
      impuestoAplicadoId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["factura"]>
    composites: {}
  }

  type FacturaGetPayload<S extends boolean | null | undefined | FacturaDefaultArgs> = $Result.GetResult<Prisma.$FacturaPayload, S>

  type FacturaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FacturaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FacturaCountAggregateInputType | true
    }

  export interface FacturaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Factura'], meta: { name: 'Factura' } }
    /**
     * Find zero or one Factura that matches the filter.
     * @param {FacturaFindUniqueArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FacturaFindUniqueArgs>(args: SelectSubset<T, FacturaFindUniqueArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Factura that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FacturaFindUniqueOrThrowArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FacturaFindUniqueOrThrowArgs>(args: SelectSubset<T, FacturaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Factura that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaFindFirstArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FacturaFindFirstArgs>(args?: SelectSubset<T, FacturaFindFirstArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Factura that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaFindFirstOrThrowArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FacturaFindFirstOrThrowArgs>(args?: SelectSubset<T, FacturaFindFirstOrThrowArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Facturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Facturas
     * const facturas = await prisma.factura.findMany()
     * 
     * // Get first 10 Facturas
     * const facturas = await prisma.factura.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facturaWithIdOnly = await prisma.factura.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FacturaFindManyArgs>(args?: SelectSubset<T, FacturaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Factura.
     * @param {FacturaCreateArgs} args - Arguments to create a Factura.
     * @example
     * // Create one Factura
     * const Factura = await prisma.factura.create({
     *   data: {
     *     // ... data to create a Factura
     *   }
     * })
     * 
     */
    create<T extends FacturaCreateArgs>(args: SelectSubset<T, FacturaCreateArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Facturas.
     * @param {FacturaCreateManyArgs} args - Arguments to create many Facturas.
     * @example
     * // Create many Facturas
     * const factura = await prisma.factura.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FacturaCreateManyArgs>(args?: SelectSubset<T, FacturaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Facturas and returns the data saved in the database.
     * @param {FacturaCreateManyAndReturnArgs} args - Arguments to create many Facturas.
     * @example
     * // Create many Facturas
     * const factura = await prisma.factura.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Facturas and only return the `id`
     * const facturaWithIdOnly = await prisma.factura.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FacturaCreateManyAndReturnArgs>(args?: SelectSubset<T, FacturaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Factura.
     * @param {FacturaDeleteArgs} args - Arguments to delete one Factura.
     * @example
     * // Delete one Factura
     * const Factura = await prisma.factura.delete({
     *   where: {
     *     // ... filter to delete one Factura
     *   }
     * })
     * 
     */
    delete<T extends FacturaDeleteArgs>(args: SelectSubset<T, FacturaDeleteArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Factura.
     * @param {FacturaUpdateArgs} args - Arguments to update one Factura.
     * @example
     * // Update one Factura
     * const factura = await prisma.factura.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FacturaUpdateArgs>(args: SelectSubset<T, FacturaUpdateArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Facturas.
     * @param {FacturaDeleteManyArgs} args - Arguments to filter Facturas to delete.
     * @example
     * // Delete a few Facturas
     * const { count } = await prisma.factura.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FacturaDeleteManyArgs>(args?: SelectSubset<T, FacturaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Facturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Facturas
     * const factura = await prisma.factura.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FacturaUpdateManyArgs>(args: SelectSubset<T, FacturaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Facturas and returns the data updated in the database.
     * @param {FacturaUpdateManyAndReturnArgs} args - Arguments to update many Facturas.
     * @example
     * // Update many Facturas
     * const factura = await prisma.factura.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Facturas and only return the `id`
     * const facturaWithIdOnly = await prisma.factura.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FacturaUpdateManyAndReturnArgs>(args: SelectSubset<T, FacturaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Factura.
     * @param {FacturaUpsertArgs} args - Arguments to update or create a Factura.
     * @example
     * // Update or create a Factura
     * const factura = await prisma.factura.upsert({
     *   create: {
     *     // ... data to create a Factura
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Factura we want to update
     *   }
     * })
     */
    upsert<T extends FacturaUpsertArgs>(args: SelectSubset<T, FacturaUpsertArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Facturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaCountArgs} args - Arguments to filter Facturas to count.
     * @example
     * // Count the number of Facturas
     * const count = await prisma.factura.count({
     *   where: {
     *     // ... the filter for the Facturas we want to count
     *   }
     * })
    **/
    count<T extends FacturaCountArgs>(
      args?: Subset<T, FacturaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacturaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Factura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacturaAggregateArgs>(args: Subset<T, FacturaAggregateArgs>): Prisma.PrismaPromise<GetFacturaAggregateType<T>>

    /**
     * Group by Factura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacturaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacturaGroupByArgs['orderBy'] }
        : { orderBy?: FacturaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacturaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacturaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Factura model
   */
  readonly fields: FacturaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Factura.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacturaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    presupuesto<T extends PresupuestoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PresupuestoDefaultArgs<ExtArgs>>): Prisma__PresupuestoClient<$Result.GetResult<Prisma.$PresupuestoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    impuestoAplicado<T extends ImpuestoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ImpuestoDefaultArgs<ExtArgs>>): Prisma__ImpuestoClient<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Factura model
   */
  interface FacturaFieldRefs {
    readonly id: FieldRef<"Factura", 'Int'>
    readonly numero: FieldRef<"Factura", 'String'>
    readonly presupuestoId: FieldRef<"Factura", 'Int'>
    readonly fecha: FieldRef<"Factura", 'DateTime'>
    readonly subtotal: FieldRef<"Factura", 'Float'>
    readonly impuestos: FieldRef<"Factura", 'Float'>
    readonly total: FieldRef<"Factura", 'Float'>
    readonly estado: FieldRef<"Factura", 'EstadoFactura'>
    readonly impuestoAplicadoId: FieldRef<"Factura", 'Int'>
    readonly createdAt: FieldRef<"Factura", 'DateTime'>
    readonly updatedAt: FieldRef<"Factura", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Factura findUnique
   */
  export type FacturaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura findUniqueOrThrow
   */
  export type FacturaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura findFirst
   */
  export type FacturaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Facturas.
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Facturas.
     */
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Factura findFirstOrThrow
   */
  export type FacturaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Facturas.
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Facturas.
     */
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Factura findMany
   */
  export type FacturaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Facturas to fetch.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Facturas.
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Factura create
   */
  export type FacturaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * The data needed to create a Factura.
     */
    data: XOR<FacturaCreateInput, FacturaUncheckedCreateInput>
  }

  /**
   * Factura createMany
   */
  export type FacturaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Facturas.
     */
    data: FacturaCreateManyInput | FacturaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Factura createManyAndReturn
   */
  export type FacturaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * The data used to create many Facturas.
     */
    data: FacturaCreateManyInput | FacturaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Factura update
   */
  export type FacturaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * The data needed to update a Factura.
     */
    data: XOR<FacturaUpdateInput, FacturaUncheckedUpdateInput>
    /**
     * Choose, which Factura to update.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura updateMany
   */
  export type FacturaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Facturas.
     */
    data: XOR<FacturaUpdateManyMutationInput, FacturaUncheckedUpdateManyInput>
    /**
     * Filter which Facturas to update
     */
    where?: FacturaWhereInput
    /**
     * Limit how many Facturas to update.
     */
    limit?: number
  }

  /**
   * Factura updateManyAndReturn
   */
  export type FacturaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * The data used to update Facturas.
     */
    data: XOR<FacturaUpdateManyMutationInput, FacturaUncheckedUpdateManyInput>
    /**
     * Filter which Facturas to update
     */
    where?: FacturaWhereInput
    /**
     * Limit how many Facturas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Factura upsert
   */
  export type FacturaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * The filter to search for the Factura to update in case it exists.
     */
    where: FacturaWhereUniqueInput
    /**
     * In case the Factura found by the `where` argument doesn't exist, create a new Factura with this data.
     */
    create: XOR<FacturaCreateInput, FacturaUncheckedCreateInput>
    /**
     * In case the Factura was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacturaUpdateInput, FacturaUncheckedUpdateInput>
  }

  /**
   * Factura delete
   */
  export type FacturaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter which Factura to delete.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura deleteMany
   */
  export type FacturaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Facturas to delete
     */
    where?: FacturaWhereInput
    /**
     * Limit how many Facturas to delete.
     */
    limit?: number
  }

  /**
   * Factura without action
   */
  export type FacturaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
  }


  /**
   * Model Recibo
   */

  export type AggregateRecibo = {
    _count: ReciboCountAggregateOutputType | null
    _avg: ReciboAvgAggregateOutputType | null
    _sum: ReciboSumAggregateOutputType | null
    _min: ReciboMinAggregateOutputType | null
    _max: ReciboMaxAggregateOutputType | null
  }

  export type ReciboAvgAggregateOutputType = {
    id: number | null
    personaId: number | null
    monto: number | null
  }

  export type ReciboSumAggregateOutputType = {
    id: number | null
    personaId: number | null
    monto: number | null
  }

  export type ReciboMinAggregateOutputType = {
    id: number | null
    personaId: number | null
    concepto: string | null
    monto: number | null
    fecha: Date | null
    metodoPago: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReciboMaxAggregateOutputType = {
    id: number | null
    personaId: number | null
    concepto: string | null
    monto: number | null
    fecha: Date | null
    metodoPago: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReciboCountAggregateOutputType = {
    id: number
    personaId: number
    concepto: number
    monto: number
    fecha: number
    metodoPago: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReciboAvgAggregateInputType = {
    id?: true
    personaId?: true
    monto?: true
  }

  export type ReciboSumAggregateInputType = {
    id?: true
    personaId?: true
    monto?: true
  }

  export type ReciboMinAggregateInputType = {
    id?: true
    personaId?: true
    concepto?: true
    monto?: true
    fecha?: true
    metodoPago?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReciboMaxAggregateInputType = {
    id?: true
    personaId?: true
    concepto?: true
    monto?: true
    fecha?: true
    metodoPago?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReciboCountAggregateInputType = {
    id?: true
    personaId?: true
    concepto?: true
    monto?: true
    fecha?: true
    metodoPago?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReciboAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recibo to aggregate.
     */
    where?: ReciboWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recibos to fetch.
     */
    orderBy?: ReciboOrderByWithRelationInput | ReciboOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReciboWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recibos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recibos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recibos
    **/
    _count?: true | ReciboCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReciboAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReciboSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReciboMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReciboMaxAggregateInputType
  }

  export type GetReciboAggregateType<T extends ReciboAggregateArgs> = {
        [P in keyof T & keyof AggregateRecibo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecibo[P]>
      : GetScalarType<T[P], AggregateRecibo[P]>
  }




  export type ReciboGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReciboWhereInput
    orderBy?: ReciboOrderByWithAggregationInput | ReciboOrderByWithAggregationInput[]
    by: ReciboScalarFieldEnum[] | ReciboScalarFieldEnum
    having?: ReciboScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReciboCountAggregateInputType | true
    _avg?: ReciboAvgAggregateInputType
    _sum?: ReciboSumAggregateInputType
    _min?: ReciboMinAggregateInputType
    _max?: ReciboMaxAggregateInputType
  }

  export type ReciboGroupByOutputType = {
    id: number
    personaId: number
    concepto: string
    monto: number
    fecha: Date
    metodoPago: string
    createdAt: Date
    updatedAt: Date
    _count: ReciboCountAggregateOutputType | null
    _avg: ReciboAvgAggregateOutputType | null
    _sum: ReciboSumAggregateOutputType | null
    _min: ReciboMinAggregateOutputType | null
    _max: ReciboMaxAggregateOutputType | null
  }

  type GetReciboGroupByPayload<T extends ReciboGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReciboGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReciboGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReciboGroupByOutputType[P]>
            : GetScalarType<T[P], ReciboGroupByOutputType[P]>
        }
      >
    >


  export type ReciboSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personaId?: boolean
    concepto?: boolean
    monto?: boolean
    fecha?: boolean
    metodoPago?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    persona?: boolean | PersonaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recibo"]>

  export type ReciboSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personaId?: boolean
    concepto?: boolean
    monto?: boolean
    fecha?: boolean
    metodoPago?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    persona?: boolean | PersonaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recibo"]>

  export type ReciboSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personaId?: boolean
    concepto?: boolean
    monto?: boolean
    fecha?: boolean
    metodoPago?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    persona?: boolean | PersonaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recibo"]>

  export type ReciboSelectScalar = {
    id?: boolean
    personaId?: boolean
    concepto?: boolean
    monto?: boolean
    fecha?: boolean
    metodoPago?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReciboOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "personaId" | "concepto" | "monto" | "fecha" | "metodoPago" | "createdAt" | "updatedAt", ExtArgs["result"]["recibo"]>
  export type ReciboInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    persona?: boolean | PersonaDefaultArgs<ExtArgs>
  }
  export type ReciboIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    persona?: boolean | PersonaDefaultArgs<ExtArgs>
  }
  export type ReciboIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    persona?: boolean | PersonaDefaultArgs<ExtArgs>
  }

  export type $ReciboPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recibo"
    objects: {
      persona: Prisma.$PersonaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      personaId: number
      concepto: string
      monto: number
      fecha: Date
      metodoPago: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["recibo"]>
    composites: {}
  }

  type ReciboGetPayload<S extends boolean | null | undefined | ReciboDefaultArgs> = $Result.GetResult<Prisma.$ReciboPayload, S>

  type ReciboCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReciboFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReciboCountAggregateInputType | true
    }

  export interface ReciboDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recibo'], meta: { name: 'Recibo' } }
    /**
     * Find zero or one Recibo that matches the filter.
     * @param {ReciboFindUniqueArgs} args - Arguments to find a Recibo
     * @example
     * // Get one Recibo
     * const recibo = await prisma.recibo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReciboFindUniqueArgs>(args: SelectSubset<T, ReciboFindUniqueArgs<ExtArgs>>): Prisma__ReciboClient<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recibo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReciboFindUniqueOrThrowArgs} args - Arguments to find a Recibo
     * @example
     * // Get one Recibo
     * const recibo = await prisma.recibo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReciboFindUniqueOrThrowArgs>(args: SelectSubset<T, ReciboFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReciboClient<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recibo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReciboFindFirstArgs} args - Arguments to find a Recibo
     * @example
     * // Get one Recibo
     * const recibo = await prisma.recibo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReciboFindFirstArgs>(args?: SelectSubset<T, ReciboFindFirstArgs<ExtArgs>>): Prisma__ReciboClient<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recibo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReciboFindFirstOrThrowArgs} args - Arguments to find a Recibo
     * @example
     * // Get one Recibo
     * const recibo = await prisma.recibo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReciboFindFirstOrThrowArgs>(args?: SelectSubset<T, ReciboFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReciboClient<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recibos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReciboFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recibos
     * const recibos = await prisma.recibo.findMany()
     * 
     * // Get first 10 Recibos
     * const recibos = await prisma.recibo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reciboWithIdOnly = await prisma.recibo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReciboFindManyArgs>(args?: SelectSubset<T, ReciboFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recibo.
     * @param {ReciboCreateArgs} args - Arguments to create a Recibo.
     * @example
     * // Create one Recibo
     * const Recibo = await prisma.recibo.create({
     *   data: {
     *     // ... data to create a Recibo
     *   }
     * })
     * 
     */
    create<T extends ReciboCreateArgs>(args: SelectSubset<T, ReciboCreateArgs<ExtArgs>>): Prisma__ReciboClient<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recibos.
     * @param {ReciboCreateManyArgs} args - Arguments to create many Recibos.
     * @example
     * // Create many Recibos
     * const recibo = await prisma.recibo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReciboCreateManyArgs>(args?: SelectSubset<T, ReciboCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recibos and returns the data saved in the database.
     * @param {ReciboCreateManyAndReturnArgs} args - Arguments to create many Recibos.
     * @example
     * // Create many Recibos
     * const recibo = await prisma.recibo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recibos and only return the `id`
     * const reciboWithIdOnly = await prisma.recibo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReciboCreateManyAndReturnArgs>(args?: SelectSubset<T, ReciboCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Recibo.
     * @param {ReciboDeleteArgs} args - Arguments to delete one Recibo.
     * @example
     * // Delete one Recibo
     * const Recibo = await prisma.recibo.delete({
     *   where: {
     *     // ... filter to delete one Recibo
     *   }
     * })
     * 
     */
    delete<T extends ReciboDeleteArgs>(args: SelectSubset<T, ReciboDeleteArgs<ExtArgs>>): Prisma__ReciboClient<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recibo.
     * @param {ReciboUpdateArgs} args - Arguments to update one Recibo.
     * @example
     * // Update one Recibo
     * const recibo = await prisma.recibo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReciboUpdateArgs>(args: SelectSubset<T, ReciboUpdateArgs<ExtArgs>>): Prisma__ReciboClient<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recibos.
     * @param {ReciboDeleteManyArgs} args - Arguments to filter Recibos to delete.
     * @example
     * // Delete a few Recibos
     * const { count } = await prisma.recibo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReciboDeleteManyArgs>(args?: SelectSubset<T, ReciboDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recibos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReciboUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recibos
     * const recibo = await prisma.recibo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReciboUpdateManyArgs>(args: SelectSubset<T, ReciboUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recibos and returns the data updated in the database.
     * @param {ReciboUpdateManyAndReturnArgs} args - Arguments to update many Recibos.
     * @example
     * // Update many Recibos
     * const recibo = await prisma.recibo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Recibos and only return the `id`
     * const reciboWithIdOnly = await prisma.recibo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReciboUpdateManyAndReturnArgs>(args: SelectSubset<T, ReciboUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Recibo.
     * @param {ReciboUpsertArgs} args - Arguments to update or create a Recibo.
     * @example
     * // Update or create a Recibo
     * const recibo = await prisma.recibo.upsert({
     *   create: {
     *     // ... data to create a Recibo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recibo we want to update
     *   }
     * })
     */
    upsert<T extends ReciboUpsertArgs>(args: SelectSubset<T, ReciboUpsertArgs<ExtArgs>>): Prisma__ReciboClient<$Result.GetResult<Prisma.$ReciboPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recibos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReciboCountArgs} args - Arguments to filter Recibos to count.
     * @example
     * // Count the number of Recibos
     * const count = await prisma.recibo.count({
     *   where: {
     *     // ... the filter for the Recibos we want to count
     *   }
     * })
    **/
    count<T extends ReciboCountArgs>(
      args?: Subset<T, ReciboCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReciboCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recibo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReciboAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReciboAggregateArgs>(args: Subset<T, ReciboAggregateArgs>): Prisma.PrismaPromise<GetReciboAggregateType<T>>

    /**
     * Group by Recibo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReciboGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReciboGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReciboGroupByArgs['orderBy'] }
        : { orderBy?: ReciboGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReciboGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReciboGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recibo model
   */
  readonly fields: ReciboFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recibo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReciboClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    persona<T extends PersonaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonaDefaultArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recibo model
   */
  interface ReciboFieldRefs {
    readonly id: FieldRef<"Recibo", 'Int'>
    readonly personaId: FieldRef<"Recibo", 'Int'>
    readonly concepto: FieldRef<"Recibo", 'String'>
    readonly monto: FieldRef<"Recibo", 'Float'>
    readonly fecha: FieldRef<"Recibo", 'DateTime'>
    readonly metodoPago: FieldRef<"Recibo", 'String'>
    readonly createdAt: FieldRef<"Recibo", 'DateTime'>
    readonly updatedAt: FieldRef<"Recibo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recibo findUnique
   */
  export type ReciboFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
    /**
     * Filter, which Recibo to fetch.
     */
    where: ReciboWhereUniqueInput
  }

  /**
   * Recibo findUniqueOrThrow
   */
  export type ReciboFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
    /**
     * Filter, which Recibo to fetch.
     */
    where: ReciboWhereUniqueInput
  }

  /**
   * Recibo findFirst
   */
  export type ReciboFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
    /**
     * Filter, which Recibo to fetch.
     */
    where?: ReciboWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recibos to fetch.
     */
    orderBy?: ReciboOrderByWithRelationInput | ReciboOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recibos.
     */
    cursor?: ReciboWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recibos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recibos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recibos.
     */
    distinct?: ReciboScalarFieldEnum | ReciboScalarFieldEnum[]
  }

  /**
   * Recibo findFirstOrThrow
   */
  export type ReciboFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
    /**
     * Filter, which Recibo to fetch.
     */
    where?: ReciboWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recibos to fetch.
     */
    orderBy?: ReciboOrderByWithRelationInput | ReciboOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recibos.
     */
    cursor?: ReciboWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recibos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recibos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recibos.
     */
    distinct?: ReciboScalarFieldEnum | ReciboScalarFieldEnum[]
  }

  /**
   * Recibo findMany
   */
  export type ReciboFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
    /**
     * Filter, which Recibos to fetch.
     */
    where?: ReciboWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recibos to fetch.
     */
    orderBy?: ReciboOrderByWithRelationInput | ReciboOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recibos.
     */
    cursor?: ReciboWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recibos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recibos.
     */
    skip?: number
    distinct?: ReciboScalarFieldEnum | ReciboScalarFieldEnum[]
  }

  /**
   * Recibo create
   */
  export type ReciboCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
    /**
     * The data needed to create a Recibo.
     */
    data: XOR<ReciboCreateInput, ReciboUncheckedCreateInput>
  }

  /**
   * Recibo createMany
   */
  export type ReciboCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recibos.
     */
    data: ReciboCreateManyInput | ReciboCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recibo createManyAndReturn
   */
  export type ReciboCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * The data used to create many Recibos.
     */
    data: ReciboCreateManyInput | ReciboCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recibo update
   */
  export type ReciboUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
    /**
     * The data needed to update a Recibo.
     */
    data: XOR<ReciboUpdateInput, ReciboUncheckedUpdateInput>
    /**
     * Choose, which Recibo to update.
     */
    where: ReciboWhereUniqueInput
  }

  /**
   * Recibo updateMany
   */
  export type ReciboUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recibos.
     */
    data: XOR<ReciboUpdateManyMutationInput, ReciboUncheckedUpdateManyInput>
    /**
     * Filter which Recibos to update
     */
    where?: ReciboWhereInput
    /**
     * Limit how many Recibos to update.
     */
    limit?: number
  }

  /**
   * Recibo updateManyAndReturn
   */
  export type ReciboUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * The data used to update Recibos.
     */
    data: XOR<ReciboUpdateManyMutationInput, ReciboUncheckedUpdateManyInput>
    /**
     * Filter which Recibos to update
     */
    where?: ReciboWhereInput
    /**
     * Limit how many Recibos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recibo upsert
   */
  export type ReciboUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
    /**
     * The filter to search for the Recibo to update in case it exists.
     */
    where: ReciboWhereUniqueInput
    /**
     * In case the Recibo found by the `where` argument doesn't exist, create a new Recibo with this data.
     */
    create: XOR<ReciboCreateInput, ReciboUncheckedCreateInput>
    /**
     * In case the Recibo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReciboUpdateInput, ReciboUncheckedUpdateInput>
  }

  /**
   * Recibo delete
   */
  export type ReciboDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
    /**
     * Filter which Recibo to delete.
     */
    where: ReciboWhereUniqueInput
  }

  /**
   * Recibo deleteMany
   */
  export type ReciboDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recibos to delete
     */
    where?: ReciboWhereInput
    /**
     * Limit how many Recibos to delete.
     */
    limit?: number
  }

  /**
   * Recibo without action
   */
  export type ReciboDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recibo
     */
    select?: ReciboSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recibo
     */
    omit?: ReciboOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReciboInclude<ExtArgs> | null
  }


  /**
   * Model Impuesto
   */

  export type AggregateImpuesto = {
    _count: ImpuestoCountAggregateOutputType | null
    _avg: ImpuestoAvgAggregateOutputType | null
    _sum: ImpuestoSumAggregateOutputType | null
    _min: ImpuestoMinAggregateOutputType | null
    _max: ImpuestoMaxAggregateOutputType | null
  }

  export type ImpuestoAvgAggregateOutputType = {
    id: number | null
    porcentaje: number | null
  }

  export type ImpuestoSumAggregateOutputType = {
    id: number | null
    porcentaje: number | null
  }

  export type ImpuestoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    porcentaje: number | null
    activo: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImpuestoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    porcentaje: number | null
    activo: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImpuestoCountAggregateOutputType = {
    id: number
    nombre: number
    porcentaje: number
    activo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ImpuestoAvgAggregateInputType = {
    id?: true
    porcentaje?: true
  }

  export type ImpuestoSumAggregateInputType = {
    id?: true
    porcentaje?: true
  }

  export type ImpuestoMinAggregateInputType = {
    id?: true
    nombre?: true
    porcentaje?: true
    activo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImpuestoMaxAggregateInputType = {
    id?: true
    nombre?: true
    porcentaje?: true
    activo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImpuestoCountAggregateInputType = {
    id?: true
    nombre?: true
    porcentaje?: true
    activo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ImpuestoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Impuesto to aggregate.
     */
    where?: ImpuestoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impuestos to fetch.
     */
    orderBy?: ImpuestoOrderByWithRelationInput | ImpuestoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImpuestoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impuestos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impuestos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Impuestos
    **/
    _count?: true | ImpuestoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImpuestoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImpuestoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImpuestoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImpuestoMaxAggregateInputType
  }

  export type GetImpuestoAggregateType<T extends ImpuestoAggregateArgs> = {
        [P in keyof T & keyof AggregateImpuesto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImpuesto[P]>
      : GetScalarType<T[P], AggregateImpuesto[P]>
  }




  export type ImpuestoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImpuestoWhereInput
    orderBy?: ImpuestoOrderByWithAggregationInput | ImpuestoOrderByWithAggregationInput[]
    by: ImpuestoScalarFieldEnum[] | ImpuestoScalarFieldEnum
    having?: ImpuestoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImpuestoCountAggregateInputType | true
    _avg?: ImpuestoAvgAggregateInputType
    _sum?: ImpuestoSumAggregateInputType
    _min?: ImpuestoMinAggregateInputType
    _max?: ImpuestoMaxAggregateInputType
  }

  export type ImpuestoGroupByOutputType = {
    id: number
    nombre: string
    porcentaje: number
    activo: boolean
    createdAt: Date
    updatedAt: Date
    _count: ImpuestoCountAggregateOutputType | null
    _avg: ImpuestoAvgAggregateOutputType | null
    _sum: ImpuestoSumAggregateOutputType | null
    _min: ImpuestoMinAggregateOutputType | null
    _max: ImpuestoMaxAggregateOutputType | null
  }

  type GetImpuestoGroupByPayload<T extends ImpuestoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImpuestoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImpuestoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImpuestoGroupByOutputType[P]>
            : GetScalarType<T[P], ImpuestoGroupByOutputType[P]>
        }
      >
    >


  export type ImpuestoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    porcentaje?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    facturas?: boolean | Impuesto$facturasArgs<ExtArgs>
    _count?: boolean | ImpuestoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["impuesto"]>

  export type ImpuestoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    porcentaje?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["impuesto"]>

  export type ImpuestoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    porcentaje?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["impuesto"]>

  export type ImpuestoSelectScalar = {
    id?: boolean
    nombre?: boolean
    porcentaje?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ImpuestoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "porcentaje" | "activo" | "createdAt" | "updatedAt", ExtArgs["result"]["impuesto"]>
  export type ImpuestoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facturas?: boolean | Impuesto$facturasArgs<ExtArgs>
    _count?: boolean | ImpuestoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ImpuestoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ImpuestoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ImpuestoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Impuesto"
    objects: {
      facturas: Prisma.$FacturaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      porcentaje: number
      activo: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["impuesto"]>
    composites: {}
  }

  type ImpuestoGetPayload<S extends boolean | null | undefined | ImpuestoDefaultArgs> = $Result.GetResult<Prisma.$ImpuestoPayload, S>

  type ImpuestoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImpuestoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImpuestoCountAggregateInputType | true
    }

  export interface ImpuestoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Impuesto'], meta: { name: 'Impuesto' } }
    /**
     * Find zero or one Impuesto that matches the filter.
     * @param {ImpuestoFindUniqueArgs} args - Arguments to find a Impuesto
     * @example
     * // Get one Impuesto
     * const impuesto = await prisma.impuesto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImpuestoFindUniqueArgs>(args: SelectSubset<T, ImpuestoFindUniqueArgs<ExtArgs>>): Prisma__ImpuestoClient<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Impuesto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImpuestoFindUniqueOrThrowArgs} args - Arguments to find a Impuesto
     * @example
     * // Get one Impuesto
     * const impuesto = await prisma.impuesto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImpuestoFindUniqueOrThrowArgs>(args: SelectSubset<T, ImpuestoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImpuestoClient<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Impuesto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpuestoFindFirstArgs} args - Arguments to find a Impuesto
     * @example
     * // Get one Impuesto
     * const impuesto = await prisma.impuesto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImpuestoFindFirstArgs>(args?: SelectSubset<T, ImpuestoFindFirstArgs<ExtArgs>>): Prisma__ImpuestoClient<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Impuesto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpuestoFindFirstOrThrowArgs} args - Arguments to find a Impuesto
     * @example
     * // Get one Impuesto
     * const impuesto = await prisma.impuesto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImpuestoFindFirstOrThrowArgs>(args?: SelectSubset<T, ImpuestoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImpuestoClient<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Impuestos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpuestoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Impuestos
     * const impuestos = await prisma.impuesto.findMany()
     * 
     * // Get first 10 Impuestos
     * const impuestos = await prisma.impuesto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const impuestoWithIdOnly = await prisma.impuesto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImpuestoFindManyArgs>(args?: SelectSubset<T, ImpuestoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Impuesto.
     * @param {ImpuestoCreateArgs} args - Arguments to create a Impuesto.
     * @example
     * // Create one Impuesto
     * const Impuesto = await prisma.impuesto.create({
     *   data: {
     *     // ... data to create a Impuesto
     *   }
     * })
     * 
     */
    create<T extends ImpuestoCreateArgs>(args: SelectSubset<T, ImpuestoCreateArgs<ExtArgs>>): Prisma__ImpuestoClient<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Impuestos.
     * @param {ImpuestoCreateManyArgs} args - Arguments to create many Impuestos.
     * @example
     * // Create many Impuestos
     * const impuesto = await prisma.impuesto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImpuestoCreateManyArgs>(args?: SelectSubset<T, ImpuestoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Impuestos and returns the data saved in the database.
     * @param {ImpuestoCreateManyAndReturnArgs} args - Arguments to create many Impuestos.
     * @example
     * // Create many Impuestos
     * const impuesto = await prisma.impuesto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Impuestos and only return the `id`
     * const impuestoWithIdOnly = await prisma.impuesto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImpuestoCreateManyAndReturnArgs>(args?: SelectSubset<T, ImpuestoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Impuesto.
     * @param {ImpuestoDeleteArgs} args - Arguments to delete one Impuesto.
     * @example
     * // Delete one Impuesto
     * const Impuesto = await prisma.impuesto.delete({
     *   where: {
     *     // ... filter to delete one Impuesto
     *   }
     * })
     * 
     */
    delete<T extends ImpuestoDeleteArgs>(args: SelectSubset<T, ImpuestoDeleteArgs<ExtArgs>>): Prisma__ImpuestoClient<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Impuesto.
     * @param {ImpuestoUpdateArgs} args - Arguments to update one Impuesto.
     * @example
     * // Update one Impuesto
     * const impuesto = await prisma.impuesto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImpuestoUpdateArgs>(args: SelectSubset<T, ImpuestoUpdateArgs<ExtArgs>>): Prisma__ImpuestoClient<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Impuestos.
     * @param {ImpuestoDeleteManyArgs} args - Arguments to filter Impuestos to delete.
     * @example
     * // Delete a few Impuestos
     * const { count } = await prisma.impuesto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImpuestoDeleteManyArgs>(args?: SelectSubset<T, ImpuestoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Impuestos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpuestoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Impuestos
     * const impuesto = await prisma.impuesto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImpuestoUpdateManyArgs>(args: SelectSubset<T, ImpuestoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Impuestos and returns the data updated in the database.
     * @param {ImpuestoUpdateManyAndReturnArgs} args - Arguments to update many Impuestos.
     * @example
     * // Update many Impuestos
     * const impuesto = await prisma.impuesto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Impuestos and only return the `id`
     * const impuestoWithIdOnly = await prisma.impuesto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImpuestoUpdateManyAndReturnArgs>(args: SelectSubset<T, ImpuestoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Impuesto.
     * @param {ImpuestoUpsertArgs} args - Arguments to update or create a Impuesto.
     * @example
     * // Update or create a Impuesto
     * const impuesto = await prisma.impuesto.upsert({
     *   create: {
     *     // ... data to create a Impuesto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Impuesto we want to update
     *   }
     * })
     */
    upsert<T extends ImpuestoUpsertArgs>(args: SelectSubset<T, ImpuestoUpsertArgs<ExtArgs>>): Prisma__ImpuestoClient<$Result.GetResult<Prisma.$ImpuestoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Impuestos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpuestoCountArgs} args - Arguments to filter Impuestos to count.
     * @example
     * // Count the number of Impuestos
     * const count = await prisma.impuesto.count({
     *   where: {
     *     // ... the filter for the Impuestos we want to count
     *   }
     * })
    **/
    count<T extends ImpuestoCountArgs>(
      args?: Subset<T, ImpuestoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImpuestoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Impuesto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpuestoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImpuestoAggregateArgs>(args: Subset<T, ImpuestoAggregateArgs>): Prisma.PrismaPromise<GetImpuestoAggregateType<T>>

    /**
     * Group by Impuesto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpuestoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImpuestoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImpuestoGroupByArgs['orderBy'] }
        : { orderBy?: ImpuestoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImpuestoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImpuestoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Impuesto model
   */
  readonly fields: ImpuestoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Impuesto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImpuestoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    facturas<T extends Impuesto$facturasArgs<ExtArgs> = {}>(args?: Subset<T, Impuesto$facturasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Impuesto model
   */
  interface ImpuestoFieldRefs {
    readonly id: FieldRef<"Impuesto", 'Int'>
    readonly nombre: FieldRef<"Impuesto", 'String'>
    readonly porcentaje: FieldRef<"Impuesto", 'Float'>
    readonly activo: FieldRef<"Impuesto", 'Boolean'>
    readonly createdAt: FieldRef<"Impuesto", 'DateTime'>
    readonly updatedAt: FieldRef<"Impuesto", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Impuesto findUnique
   */
  export type ImpuestoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImpuestoInclude<ExtArgs> | null
    /**
     * Filter, which Impuesto to fetch.
     */
    where: ImpuestoWhereUniqueInput
  }

  /**
   * Impuesto findUniqueOrThrow
   */
  export type ImpuestoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImpuestoInclude<ExtArgs> | null
    /**
     * Filter, which Impuesto to fetch.
     */
    where: ImpuestoWhereUniqueInput
  }

  /**
   * Impuesto findFirst
   */
  export type ImpuestoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImpuestoInclude<ExtArgs> | null
    /**
     * Filter, which Impuesto to fetch.
     */
    where?: ImpuestoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impuestos to fetch.
     */
    orderBy?: ImpuestoOrderByWithRelationInput | ImpuestoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Impuestos.
     */
    cursor?: ImpuestoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impuestos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impuestos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Impuestos.
     */
    distinct?: ImpuestoScalarFieldEnum | ImpuestoScalarFieldEnum[]
  }

  /**
   * Impuesto findFirstOrThrow
   */
  export type ImpuestoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImpuestoInclude<ExtArgs> | null
    /**
     * Filter, which Impuesto to fetch.
     */
    where?: ImpuestoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impuestos to fetch.
     */
    orderBy?: ImpuestoOrderByWithRelationInput | ImpuestoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Impuestos.
     */
    cursor?: ImpuestoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impuestos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impuestos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Impuestos.
     */
    distinct?: ImpuestoScalarFieldEnum | ImpuestoScalarFieldEnum[]
  }

  /**
   * Impuesto findMany
   */
  export type ImpuestoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImpuestoInclude<ExtArgs> | null
    /**
     * Filter, which Impuestos to fetch.
     */
    where?: ImpuestoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impuestos to fetch.
     */
    orderBy?: ImpuestoOrderByWithRelationInput | ImpuestoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Impuestos.
     */
    cursor?: ImpuestoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impuestos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impuestos.
     */
    skip?: number
    distinct?: ImpuestoScalarFieldEnum | ImpuestoScalarFieldEnum[]
  }

  /**
   * Impuesto create
   */
  export type ImpuestoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImpuestoInclude<ExtArgs> | null
    /**
     * The data needed to create a Impuesto.
     */
    data: XOR<ImpuestoCreateInput, ImpuestoUncheckedCreateInput>
  }

  /**
   * Impuesto createMany
   */
  export type ImpuestoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Impuestos.
     */
    data: ImpuestoCreateManyInput | ImpuestoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Impuesto createManyAndReturn
   */
  export type ImpuestoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * The data used to create many Impuestos.
     */
    data: ImpuestoCreateManyInput | ImpuestoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Impuesto update
   */
  export type ImpuestoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImpuestoInclude<ExtArgs> | null
    /**
     * The data needed to update a Impuesto.
     */
    data: XOR<ImpuestoUpdateInput, ImpuestoUncheckedUpdateInput>
    /**
     * Choose, which Impuesto to update.
     */
    where: ImpuestoWhereUniqueInput
  }

  /**
   * Impuesto updateMany
   */
  export type ImpuestoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Impuestos.
     */
    data: XOR<ImpuestoUpdateManyMutationInput, ImpuestoUncheckedUpdateManyInput>
    /**
     * Filter which Impuestos to update
     */
    where?: ImpuestoWhereInput
    /**
     * Limit how many Impuestos to update.
     */
    limit?: number
  }

  /**
   * Impuesto updateManyAndReturn
   */
  export type ImpuestoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * The data used to update Impuestos.
     */
    data: XOR<ImpuestoUpdateManyMutationInput, ImpuestoUncheckedUpdateManyInput>
    /**
     * Filter which Impuestos to update
     */
    where?: ImpuestoWhereInput
    /**
     * Limit how many Impuestos to update.
     */
    limit?: number
  }

  /**
   * Impuesto upsert
   */
  export type ImpuestoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImpuestoInclude<ExtArgs> | null
    /**
     * The filter to search for the Impuesto to update in case it exists.
     */
    where: ImpuestoWhereUniqueInput
    /**
     * In case the Impuesto found by the `where` argument doesn't exist, create a new Impuesto with this data.
     */
    create: XOR<ImpuestoCreateInput, ImpuestoUncheckedCreateInput>
    /**
     * In case the Impuesto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImpuestoUpdateInput, ImpuestoUncheckedUpdateInput>
  }

  /**
   * Impuesto delete
   */
  export type ImpuestoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImpuestoInclude<ExtArgs> | null
    /**
     * Filter which Impuesto to delete.
     */
    where: ImpuestoWhereUniqueInput
  }

  /**
   * Impuesto deleteMany
   */
  export type ImpuestoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Impuestos to delete
     */
    where?: ImpuestoWhereInput
    /**
     * Limit how many Impuestos to delete.
     */
    limit?: number
  }

  /**
   * Impuesto.facturas
   */
  export type Impuesto$facturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    where?: FacturaWhereInput
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    cursor?: FacturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Impuesto without action
   */
  export type ImpuestoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Impuesto
     */
    select?: ImpuestoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Impuesto
     */
    omit?: ImpuestoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImpuestoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PersonaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    tipo: 'tipo',
    telefono: 'telefono',
    cvu: 'cvu',
    roles: 'roles',
    password: 'password',
    email: 'email',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PersonaScalarFieldEnum = (typeof PersonaScalarFieldEnum)[keyof typeof PersonaScalarFieldEnum]


  export const ProductoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    precio: 'precio',
    proveedorId: 'proveedorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductoScalarFieldEnum = (typeof ProductoScalarFieldEnum)[keyof typeof ProductoScalarFieldEnum]


  export const ServicioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    precio: 'precio',
    proveedorId: 'proveedorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServicioScalarFieldEnum = (typeof ServicioScalarFieldEnum)[keyof typeof ServicioScalarFieldEnum]


  export const PresupuestoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    subtotal: 'subtotal',
    impuestos: 'impuestos',
    total: 'total',
    estado: 'estado',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PresupuestoScalarFieldEnum = (typeof PresupuestoScalarFieldEnum)[keyof typeof PresupuestoScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    presupuestoId: 'presupuestoId',
    productoId: 'productoId',
    servicioId: 'servicioId',
    cantidad: 'cantidad',
    precioUnitario: 'precioUnitario'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const FacturaScalarFieldEnum: {
    id: 'id',
    numero: 'numero',
    presupuestoId: 'presupuestoId',
    fecha: 'fecha',
    subtotal: 'subtotal',
    impuestos: 'impuestos',
    total: 'total',
    estado: 'estado',
    impuestoAplicadoId: 'impuestoAplicadoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacturaScalarFieldEnum = (typeof FacturaScalarFieldEnum)[keyof typeof FacturaScalarFieldEnum]


  export const ReciboScalarFieldEnum: {
    id: 'id',
    personaId: 'personaId',
    concepto: 'concepto',
    monto: 'monto',
    fecha: 'fecha',
    metodoPago: 'metodoPago',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReciboScalarFieldEnum = (typeof ReciboScalarFieldEnum)[keyof typeof ReciboScalarFieldEnum]


  export const ImpuestoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    porcentaje: 'porcentaje',
    activo: 'activo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ImpuestoScalarFieldEnum = (typeof ImpuestoScalarFieldEnum)[keyof typeof ImpuestoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'TipoPersona'
   */
  export type EnumTipoPersonaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoPersona'>
    


  /**
   * Reference to a field of type 'TipoPersona[]'
   */
  export type ListEnumTipoPersonaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoPersona[]'>
    


  /**
   * Reference to a field of type 'RolUsuario[]'
   */
  export type ListEnumRolUsuarioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RolUsuario[]'>
    


  /**
   * Reference to a field of type 'RolUsuario'
   */
  export type EnumRolUsuarioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RolUsuario'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'EstadoPresupuesto'
   */
  export type EnumEstadoPresupuestoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoPresupuesto'>
    


  /**
   * Reference to a field of type 'EstadoPresupuesto[]'
   */
  export type ListEnumEstadoPresupuestoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoPresupuesto[]'>
    


  /**
   * Reference to a field of type 'EstadoFactura'
   */
  export type EnumEstadoFacturaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoFactura'>
    


  /**
   * Reference to a field of type 'EstadoFactura[]'
   */
  export type ListEnumEstadoFacturaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoFactura[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type PersonaWhereInput = {
    AND?: PersonaWhereInput | PersonaWhereInput[]
    OR?: PersonaWhereInput[]
    NOT?: PersonaWhereInput | PersonaWhereInput[]
    id?: IntFilter<"Persona"> | number
    nombre?: StringFilter<"Persona"> | string
    tipo?: EnumTipoPersonaFilter<"Persona"> | $Enums.TipoPersona
    telefono?: StringNullableFilter<"Persona"> | string | null
    cvu?: StringNullableFilter<"Persona"> | string | null
    roles?: EnumRolUsuarioNullableListFilter<"Persona">
    password?: StringFilter<"Persona"> | string
    email?: StringFilter<"Persona"> | string
    createdAt?: DateTimeFilter<"Persona"> | Date | string
    updatedAt?: DateTimeFilter<"Persona"> | Date | string
    productos?: ProductoListRelationFilter
    servicios?: ServicioListRelationFilter
    presupuestos?: PresupuestoListRelationFilter
    recibos?: ReciboListRelationFilter
  }

  export type PersonaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    telefono?: SortOrderInput | SortOrder
    cvu?: SortOrderInput | SortOrder
    roles?: SortOrder
    password?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productos?: ProductoOrderByRelationAggregateInput
    servicios?: ServicioOrderByRelationAggregateInput
    presupuestos?: PresupuestoOrderByRelationAggregateInput
    recibos?: ReciboOrderByRelationAggregateInput
  }

  export type PersonaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: PersonaWhereInput | PersonaWhereInput[]
    OR?: PersonaWhereInput[]
    NOT?: PersonaWhereInput | PersonaWhereInput[]
    nombre?: StringFilter<"Persona"> | string
    tipo?: EnumTipoPersonaFilter<"Persona"> | $Enums.TipoPersona
    telefono?: StringNullableFilter<"Persona"> | string | null
    cvu?: StringNullableFilter<"Persona"> | string | null
    roles?: EnumRolUsuarioNullableListFilter<"Persona">
    password?: StringFilter<"Persona"> | string
    createdAt?: DateTimeFilter<"Persona"> | Date | string
    updatedAt?: DateTimeFilter<"Persona"> | Date | string
    productos?: ProductoListRelationFilter
    servicios?: ServicioListRelationFilter
    presupuestos?: PresupuestoListRelationFilter
    recibos?: ReciboListRelationFilter
  }, "id" | "email">

  export type PersonaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    telefono?: SortOrderInput | SortOrder
    cvu?: SortOrderInput | SortOrder
    roles?: SortOrder
    password?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PersonaCountOrderByAggregateInput
    _avg?: PersonaAvgOrderByAggregateInput
    _max?: PersonaMaxOrderByAggregateInput
    _min?: PersonaMinOrderByAggregateInput
    _sum?: PersonaSumOrderByAggregateInput
  }

  export type PersonaScalarWhereWithAggregatesInput = {
    AND?: PersonaScalarWhereWithAggregatesInput | PersonaScalarWhereWithAggregatesInput[]
    OR?: PersonaScalarWhereWithAggregatesInput[]
    NOT?: PersonaScalarWhereWithAggregatesInput | PersonaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Persona"> | number
    nombre?: StringWithAggregatesFilter<"Persona"> | string
    tipo?: EnumTipoPersonaWithAggregatesFilter<"Persona"> | $Enums.TipoPersona
    telefono?: StringNullableWithAggregatesFilter<"Persona"> | string | null
    cvu?: StringNullableWithAggregatesFilter<"Persona"> | string | null
    roles?: EnumRolUsuarioNullableListFilter<"Persona">
    password?: StringWithAggregatesFilter<"Persona"> | string
    email?: StringWithAggregatesFilter<"Persona"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Persona"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Persona"> | Date | string
  }

  export type ProductoWhereInput = {
    AND?: ProductoWhereInput | ProductoWhereInput[]
    OR?: ProductoWhereInput[]
    NOT?: ProductoWhereInput | ProductoWhereInput[]
    id?: IntFilter<"Producto"> | number
    nombre?: StringFilter<"Producto"> | string
    precio?: FloatFilter<"Producto"> | number
    proveedorId?: IntFilter<"Producto"> | number
    createdAt?: DateTimeFilter<"Producto"> | Date | string
    updatedAt?: DateTimeFilter<"Producto"> | Date | string
    proveedor?: XOR<PersonaScalarRelationFilter, PersonaWhereInput>
    items?: ItemListRelationFilter
  }

  export type ProductoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    proveedor?: PersonaOrderByWithRelationInput
    items?: ItemOrderByRelationAggregateInput
  }

  export type ProductoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductoWhereInput | ProductoWhereInput[]
    OR?: ProductoWhereInput[]
    NOT?: ProductoWhereInput | ProductoWhereInput[]
    nombre?: StringFilter<"Producto"> | string
    precio?: FloatFilter<"Producto"> | number
    proveedorId?: IntFilter<"Producto"> | number
    createdAt?: DateTimeFilter<"Producto"> | Date | string
    updatedAt?: DateTimeFilter<"Producto"> | Date | string
    proveedor?: XOR<PersonaScalarRelationFilter, PersonaWhereInput>
    items?: ItemListRelationFilter
  }, "id">

  export type ProductoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductoCountOrderByAggregateInput
    _avg?: ProductoAvgOrderByAggregateInput
    _max?: ProductoMaxOrderByAggregateInput
    _min?: ProductoMinOrderByAggregateInput
    _sum?: ProductoSumOrderByAggregateInput
  }

  export type ProductoScalarWhereWithAggregatesInput = {
    AND?: ProductoScalarWhereWithAggregatesInput | ProductoScalarWhereWithAggregatesInput[]
    OR?: ProductoScalarWhereWithAggregatesInput[]
    NOT?: ProductoScalarWhereWithAggregatesInput | ProductoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Producto"> | number
    nombre?: StringWithAggregatesFilter<"Producto"> | string
    precio?: FloatWithAggregatesFilter<"Producto"> | number
    proveedorId?: IntWithAggregatesFilter<"Producto"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Producto"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Producto"> | Date | string
  }

  export type ServicioWhereInput = {
    AND?: ServicioWhereInput | ServicioWhereInput[]
    OR?: ServicioWhereInput[]
    NOT?: ServicioWhereInput | ServicioWhereInput[]
    id?: IntFilter<"Servicio"> | number
    nombre?: StringFilter<"Servicio"> | string
    descripcion?: StringFilter<"Servicio"> | string
    precio?: FloatFilter<"Servicio"> | number
    proveedorId?: IntFilter<"Servicio"> | number
    createdAt?: DateTimeFilter<"Servicio"> | Date | string
    updatedAt?: DateTimeFilter<"Servicio"> | Date | string
    proveedor?: XOR<PersonaScalarRelationFilter, PersonaWhereInput>
    items?: ItemListRelationFilter
  }

  export type ServicioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    proveedor?: PersonaOrderByWithRelationInput
    items?: ItemOrderByRelationAggregateInput
  }

  export type ServicioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServicioWhereInput | ServicioWhereInput[]
    OR?: ServicioWhereInput[]
    NOT?: ServicioWhereInput | ServicioWhereInput[]
    nombre?: StringFilter<"Servicio"> | string
    descripcion?: StringFilter<"Servicio"> | string
    precio?: FloatFilter<"Servicio"> | number
    proveedorId?: IntFilter<"Servicio"> | number
    createdAt?: DateTimeFilter<"Servicio"> | Date | string
    updatedAt?: DateTimeFilter<"Servicio"> | Date | string
    proveedor?: XOR<PersonaScalarRelationFilter, PersonaWhereInput>
    items?: ItemListRelationFilter
  }, "id">

  export type ServicioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServicioCountOrderByAggregateInput
    _avg?: ServicioAvgOrderByAggregateInput
    _max?: ServicioMaxOrderByAggregateInput
    _min?: ServicioMinOrderByAggregateInput
    _sum?: ServicioSumOrderByAggregateInput
  }

  export type ServicioScalarWhereWithAggregatesInput = {
    AND?: ServicioScalarWhereWithAggregatesInput | ServicioScalarWhereWithAggregatesInput[]
    OR?: ServicioScalarWhereWithAggregatesInput[]
    NOT?: ServicioScalarWhereWithAggregatesInput | ServicioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Servicio"> | number
    nombre?: StringWithAggregatesFilter<"Servicio"> | string
    descripcion?: StringWithAggregatesFilter<"Servicio"> | string
    precio?: FloatWithAggregatesFilter<"Servicio"> | number
    proveedorId?: IntWithAggregatesFilter<"Servicio"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Servicio"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Servicio"> | Date | string
  }

  export type PresupuestoWhereInput = {
    AND?: PresupuestoWhereInput | PresupuestoWhereInput[]
    OR?: PresupuestoWhereInput[]
    NOT?: PresupuestoWhereInput | PresupuestoWhereInput[]
    id?: IntFilter<"Presupuesto"> | number
    clienteId?: IntFilter<"Presupuesto"> | number
    subtotal?: FloatFilter<"Presupuesto"> | number
    impuestos?: FloatFilter<"Presupuesto"> | number
    total?: FloatFilter<"Presupuesto"> | number
    estado?: EnumEstadoPresupuestoFilter<"Presupuesto"> | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFilter<"Presupuesto"> | Date | string
    updatedAt?: DateTimeFilter<"Presupuesto"> | Date | string
    cliente?: XOR<PersonaScalarRelationFilter, PersonaWhereInput>
    items?: ItemListRelationFilter
    factura?: XOR<FacturaNullableScalarRelationFilter, FacturaWhereInput> | null
  }

  export type PresupuestoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cliente?: PersonaOrderByWithRelationInput
    items?: ItemOrderByRelationAggregateInput
    factura?: FacturaOrderByWithRelationInput
  }

  export type PresupuestoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PresupuestoWhereInput | PresupuestoWhereInput[]
    OR?: PresupuestoWhereInput[]
    NOT?: PresupuestoWhereInput | PresupuestoWhereInput[]
    clienteId?: IntFilter<"Presupuesto"> | number
    subtotal?: FloatFilter<"Presupuesto"> | number
    impuestos?: FloatFilter<"Presupuesto"> | number
    total?: FloatFilter<"Presupuesto"> | number
    estado?: EnumEstadoPresupuestoFilter<"Presupuesto"> | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFilter<"Presupuesto"> | Date | string
    updatedAt?: DateTimeFilter<"Presupuesto"> | Date | string
    cliente?: XOR<PersonaScalarRelationFilter, PersonaWhereInput>
    items?: ItemListRelationFilter
    factura?: XOR<FacturaNullableScalarRelationFilter, FacturaWhereInput> | null
  }, "id">

  export type PresupuestoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PresupuestoCountOrderByAggregateInput
    _avg?: PresupuestoAvgOrderByAggregateInput
    _max?: PresupuestoMaxOrderByAggregateInput
    _min?: PresupuestoMinOrderByAggregateInput
    _sum?: PresupuestoSumOrderByAggregateInput
  }

  export type PresupuestoScalarWhereWithAggregatesInput = {
    AND?: PresupuestoScalarWhereWithAggregatesInput | PresupuestoScalarWhereWithAggregatesInput[]
    OR?: PresupuestoScalarWhereWithAggregatesInput[]
    NOT?: PresupuestoScalarWhereWithAggregatesInput | PresupuestoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Presupuesto"> | number
    clienteId?: IntWithAggregatesFilter<"Presupuesto"> | number
    subtotal?: FloatWithAggregatesFilter<"Presupuesto"> | number
    impuestos?: FloatWithAggregatesFilter<"Presupuesto"> | number
    total?: FloatWithAggregatesFilter<"Presupuesto"> | number
    estado?: EnumEstadoPresupuestoWithAggregatesFilter<"Presupuesto"> | $Enums.EstadoPresupuesto
    createdAt?: DateTimeWithAggregatesFilter<"Presupuesto"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Presupuesto"> | Date | string
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: IntFilter<"Item"> | number
    presupuestoId?: IntFilter<"Item"> | number
    productoId?: IntNullableFilter<"Item"> | number | null
    servicioId?: IntNullableFilter<"Item"> | number | null
    cantidad?: IntFilter<"Item"> | number
    precioUnitario?: FloatFilter<"Item"> | number
    presupuesto?: XOR<PresupuestoScalarRelationFilter, PresupuestoWhereInput>
    producto?: XOR<ProductoNullableScalarRelationFilter, ProductoWhereInput> | null
    servicio?: XOR<ServicioNullableScalarRelationFilter, ServicioWhereInput> | null
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    presupuestoId?: SortOrder
    productoId?: SortOrderInput | SortOrder
    servicioId?: SortOrderInput | SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    presupuesto?: PresupuestoOrderByWithRelationInput
    producto?: ProductoOrderByWithRelationInput
    servicio?: ServicioOrderByWithRelationInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    presupuestoId?: IntFilter<"Item"> | number
    productoId?: IntNullableFilter<"Item"> | number | null
    servicioId?: IntNullableFilter<"Item"> | number | null
    cantidad?: IntFilter<"Item"> | number
    precioUnitario?: FloatFilter<"Item"> | number
    presupuesto?: XOR<PresupuestoScalarRelationFilter, PresupuestoWhereInput>
    producto?: XOR<ProductoNullableScalarRelationFilter, ProductoWhereInput> | null
    servicio?: XOR<ServicioNullableScalarRelationFilter, ServicioWhereInput> | null
  }, "id">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    presupuestoId?: SortOrder
    productoId?: SortOrderInput | SortOrder
    servicioId?: SortOrderInput | SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _avg?: ItemAvgOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
    _sum?: ItemSumOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Item"> | number
    presupuestoId?: IntWithAggregatesFilter<"Item"> | number
    productoId?: IntNullableWithAggregatesFilter<"Item"> | number | null
    servicioId?: IntNullableWithAggregatesFilter<"Item"> | number | null
    cantidad?: IntWithAggregatesFilter<"Item"> | number
    precioUnitario?: FloatWithAggregatesFilter<"Item"> | number
  }

  export type FacturaWhereInput = {
    AND?: FacturaWhereInput | FacturaWhereInput[]
    OR?: FacturaWhereInput[]
    NOT?: FacturaWhereInput | FacturaWhereInput[]
    id?: IntFilter<"Factura"> | number
    numero?: StringFilter<"Factura"> | string
    presupuestoId?: IntFilter<"Factura"> | number
    fecha?: DateTimeFilter<"Factura"> | Date | string
    subtotal?: FloatFilter<"Factura"> | number
    impuestos?: FloatFilter<"Factura"> | number
    total?: FloatFilter<"Factura"> | number
    estado?: EnumEstadoFacturaFilter<"Factura"> | $Enums.EstadoFactura
    impuestoAplicadoId?: IntFilter<"Factura"> | number
    createdAt?: DateTimeFilter<"Factura"> | Date | string
    updatedAt?: DateTimeFilter<"Factura"> | Date | string
    presupuesto?: XOR<PresupuestoScalarRelationFilter, PresupuestoWhereInput>
    impuestoAplicado?: XOR<ImpuestoScalarRelationFilter, ImpuestoWhereInput>
  }

  export type FacturaOrderByWithRelationInput = {
    id?: SortOrder
    numero?: SortOrder
    presupuestoId?: SortOrder
    fecha?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    estado?: SortOrder
    impuestoAplicadoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    presupuesto?: PresupuestoOrderByWithRelationInput
    impuestoAplicado?: ImpuestoOrderByWithRelationInput
  }

  export type FacturaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    numero?: string
    presupuestoId?: number
    AND?: FacturaWhereInput | FacturaWhereInput[]
    OR?: FacturaWhereInput[]
    NOT?: FacturaWhereInput | FacturaWhereInput[]
    fecha?: DateTimeFilter<"Factura"> | Date | string
    subtotal?: FloatFilter<"Factura"> | number
    impuestos?: FloatFilter<"Factura"> | number
    total?: FloatFilter<"Factura"> | number
    estado?: EnumEstadoFacturaFilter<"Factura"> | $Enums.EstadoFactura
    impuestoAplicadoId?: IntFilter<"Factura"> | number
    createdAt?: DateTimeFilter<"Factura"> | Date | string
    updatedAt?: DateTimeFilter<"Factura"> | Date | string
    presupuesto?: XOR<PresupuestoScalarRelationFilter, PresupuestoWhereInput>
    impuestoAplicado?: XOR<ImpuestoScalarRelationFilter, ImpuestoWhereInput>
  }, "id" | "numero" | "presupuestoId">

  export type FacturaOrderByWithAggregationInput = {
    id?: SortOrder
    numero?: SortOrder
    presupuestoId?: SortOrder
    fecha?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    estado?: SortOrder
    impuestoAplicadoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacturaCountOrderByAggregateInput
    _avg?: FacturaAvgOrderByAggregateInput
    _max?: FacturaMaxOrderByAggregateInput
    _min?: FacturaMinOrderByAggregateInput
    _sum?: FacturaSumOrderByAggregateInput
  }

  export type FacturaScalarWhereWithAggregatesInput = {
    AND?: FacturaScalarWhereWithAggregatesInput | FacturaScalarWhereWithAggregatesInput[]
    OR?: FacturaScalarWhereWithAggregatesInput[]
    NOT?: FacturaScalarWhereWithAggregatesInput | FacturaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Factura"> | number
    numero?: StringWithAggregatesFilter<"Factura"> | string
    presupuestoId?: IntWithAggregatesFilter<"Factura"> | number
    fecha?: DateTimeWithAggregatesFilter<"Factura"> | Date | string
    subtotal?: FloatWithAggregatesFilter<"Factura"> | number
    impuestos?: FloatWithAggregatesFilter<"Factura"> | number
    total?: FloatWithAggregatesFilter<"Factura"> | number
    estado?: EnumEstadoFacturaWithAggregatesFilter<"Factura"> | $Enums.EstadoFactura
    impuestoAplicadoId?: IntWithAggregatesFilter<"Factura"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Factura"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Factura"> | Date | string
  }

  export type ReciboWhereInput = {
    AND?: ReciboWhereInput | ReciboWhereInput[]
    OR?: ReciboWhereInput[]
    NOT?: ReciboWhereInput | ReciboWhereInput[]
    id?: IntFilter<"Recibo"> | number
    personaId?: IntFilter<"Recibo"> | number
    concepto?: StringFilter<"Recibo"> | string
    monto?: FloatFilter<"Recibo"> | number
    fecha?: DateTimeFilter<"Recibo"> | Date | string
    metodoPago?: StringFilter<"Recibo"> | string
    createdAt?: DateTimeFilter<"Recibo"> | Date | string
    updatedAt?: DateTimeFilter<"Recibo"> | Date | string
    persona?: XOR<PersonaScalarRelationFilter, PersonaWhereInput>
  }

  export type ReciboOrderByWithRelationInput = {
    id?: SortOrder
    personaId?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    fecha?: SortOrder
    metodoPago?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    persona?: PersonaOrderByWithRelationInput
  }

  export type ReciboWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReciboWhereInput | ReciboWhereInput[]
    OR?: ReciboWhereInput[]
    NOT?: ReciboWhereInput | ReciboWhereInput[]
    personaId?: IntFilter<"Recibo"> | number
    concepto?: StringFilter<"Recibo"> | string
    monto?: FloatFilter<"Recibo"> | number
    fecha?: DateTimeFilter<"Recibo"> | Date | string
    metodoPago?: StringFilter<"Recibo"> | string
    createdAt?: DateTimeFilter<"Recibo"> | Date | string
    updatedAt?: DateTimeFilter<"Recibo"> | Date | string
    persona?: XOR<PersonaScalarRelationFilter, PersonaWhereInput>
  }, "id">

  export type ReciboOrderByWithAggregationInput = {
    id?: SortOrder
    personaId?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    fecha?: SortOrder
    metodoPago?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReciboCountOrderByAggregateInput
    _avg?: ReciboAvgOrderByAggregateInput
    _max?: ReciboMaxOrderByAggregateInput
    _min?: ReciboMinOrderByAggregateInput
    _sum?: ReciboSumOrderByAggregateInput
  }

  export type ReciboScalarWhereWithAggregatesInput = {
    AND?: ReciboScalarWhereWithAggregatesInput | ReciboScalarWhereWithAggregatesInput[]
    OR?: ReciboScalarWhereWithAggregatesInput[]
    NOT?: ReciboScalarWhereWithAggregatesInput | ReciboScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Recibo"> | number
    personaId?: IntWithAggregatesFilter<"Recibo"> | number
    concepto?: StringWithAggregatesFilter<"Recibo"> | string
    monto?: FloatWithAggregatesFilter<"Recibo"> | number
    fecha?: DateTimeWithAggregatesFilter<"Recibo"> | Date | string
    metodoPago?: StringWithAggregatesFilter<"Recibo"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Recibo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Recibo"> | Date | string
  }

  export type ImpuestoWhereInput = {
    AND?: ImpuestoWhereInput | ImpuestoWhereInput[]
    OR?: ImpuestoWhereInput[]
    NOT?: ImpuestoWhereInput | ImpuestoWhereInput[]
    id?: IntFilter<"Impuesto"> | number
    nombre?: StringFilter<"Impuesto"> | string
    porcentaje?: FloatFilter<"Impuesto"> | number
    activo?: BoolFilter<"Impuesto"> | boolean
    createdAt?: DateTimeFilter<"Impuesto"> | Date | string
    updatedAt?: DateTimeFilter<"Impuesto"> | Date | string
    facturas?: FacturaListRelationFilter
  }

  export type ImpuestoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    porcentaje?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    facturas?: FacturaOrderByRelationAggregateInput
  }

  export type ImpuestoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ImpuestoWhereInput | ImpuestoWhereInput[]
    OR?: ImpuestoWhereInput[]
    NOT?: ImpuestoWhereInput | ImpuestoWhereInput[]
    nombre?: StringFilter<"Impuesto"> | string
    porcentaje?: FloatFilter<"Impuesto"> | number
    activo?: BoolFilter<"Impuesto"> | boolean
    createdAt?: DateTimeFilter<"Impuesto"> | Date | string
    updatedAt?: DateTimeFilter<"Impuesto"> | Date | string
    facturas?: FacturaListRelationFilter
  }, "id">

  export type ImpuestoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    porcentaje?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ImpuestoCountOrderByAggregateInput
    _avg?: ImpuestoAvgOrderByAggregateInput
    _max?: ImpuestoMaxOrderByAggregateInput
    _min?: ImpuestoMinOrderByAggregateInput
    _sum?: ImpuestoSumOrderByAggregateInput
  }

  export type ImpuestoScalarWhereWithAggregatesInput = {
    AND?: ImpuestoScalarWhereWithAggregatesInput | ImpuestoScalarWhereWithAggregatesInput[]
    OR?: ImpuestoScalarWhereWithAggregatesInput[]
    NOT?: ImpuestoScalarWhereWithAggregatesInput | ImpuestoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Impuesto"> | number
    nombre?: StringWithAggregatesFilter<"Impuesto"> | string
    porcentaje?: FloatWithAggregatesFilter<"Impuesto"> | number
    activo?: BoolWithAggregatesFilter<"Impuesto"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Impuesto"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Impuesto"> | Date | string
  }

  export type PersonaCreateInput = {
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productos?: ProductoCreateNestedManyWithoutProveedorInput
    servicios?: ServicioCreateNestedManyWithoutProveedorInput
    presupuestos?: PresupuestoCreateNestedManyWithoutClienteInput
    recibos?: ReciboCreateNestedManyWithoutPersonaInput
  }

  export type PersonaUncheckedCreateInput = {
    id?: number
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productos?: ProductoUncheckedCreateNestedManyWithoutProveedorInput
    servicios?: ServicioUncheckedCreateNestedManyWithoutProveedorInput
    presupuestos?: PresupuestoUncheckedCreateNestedManyWithoutClienteInput
    recibos?: ReciboUncheckedCreateNestedManyWithoutPersonaInput
  }

  export type PersonaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productos?: ProductoUpdateManyWithoutProveedorNestedInput
    servicios?: ServicioUpdateManyWithoutProveedorNestedInput
    presupuestos?: PresupuestoUpdateManyWithoutClienteNestedInput
    recibos?: ReciboUpdateManyWithoutPersonaNestedInput
  }

  export type PersonaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productos?: ProductoUncheckedUpdateManyWithoutProveedorNestedInput
    servicios?: ServicioUncheckedUpdateManyWithoutProveedorNestedInput
    presupuestos?: PresupuestoUncheckedUpdateManyWithoutClienteNestedInput
    recibos?: ReciboUncheckedUpdateManyWithoutPersonaNestedInput
  }

  export type PersonaCreateManyInput = {
    id?: number
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PersonaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductoCreateInput = {
    nombre: string
    precio: number
    createdAt?: Date | string
    updatedAt?: Date | string
    proveedor: PersonaCreateNestedOneWithoutProductosInput
    items?: ItemCreateNestedManyWithoutProductoInput
  }

  export type ProductoUncheckedCreateInput = {
    id?: number
    nombre: string
    precio: number
    proveedorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: PersonaUpdateOneRequiredWithoutProductosNestedInput
    items?: ItemUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    proveedorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type ProductoCreateManyInput = {
    id?: number
    nombre: string
    precio: number
    proveedorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    proveedorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioCreateInput = {
    nombre: string
    descripcion: string
    precio: number
    createdAt?: Date | string
    updatedAt?: Date | string
    proveedor: PersonaCreateNestedOneWithoutServiciosInput
    items?: ItemCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateInput = {
    id?: number
    nombre: string
    descripcion: string
    precio: number
    proveedorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: PersonaUpdateOneRequiredWithoutServiciosNestedInput
    items?: ItemUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    proveedorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioCreateManyInput = {
    id?: number
    nombre: string
    descripcion: string
    precio: number
    proveedorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServicioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    proveedorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresupuestoCreateInput = {
    subtotal: number
    impuestos: number
    total: number
    estado?: $Enums.EstadoPresupuesto
    createdAt?: Date | string
    updatedAt?: Date | string
    cliente: PersonaCreateNestedOneWithoutPresupuestosInput
    items?: ItemCreateNestedManyWithoutPresupuestoInput
    factura?: FacturaCreateNestedOneWithoutPresupuestoInput
  }

  export type PresupuestoUncheckedCreateInput = {
    id?: number
    clienteId: number
    subtotal: number
    impuestos: number
    total: number
    estado?: $Enums.EstadoPresupuesto
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutPresupuestoInput
    factura?: FacturaUncheckedCreateNestedOneWithoutPresupuestoInput
  }

  export type PresupuestoUpdateInput = {
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: PersonaUpdateOneRequiredWithoutPresupuestosNestedInput
    items?: ItemUpdateManyWithoutPresupuestoNestedInput
    factura?: FacturaUpdateOneWithoutPresupuestoNestedInput
  }

  export type PresupuestoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutPresupuestoNestedInput
    factura?: FacturaUncheckedUpdateOneWithoutPresupuestoNestedInput
  }

  export type PresupuestoCreateManyInput = {
    id?: number
    clienteId: number
    subtotal: number
    impuestos: number
    total: number
    estado?: $Enums.EstadoPresupuesto
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PresupuestoUpdateManyMutationInput = {
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresupuestoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemCreateInput = {
    cantidad: number
    precioUnitario: number
    presupuesto: PresupuestoCreateNestedOneWithoutItemsInput
    producto?: ProductoCreateNestedOneWithoutItemsInput
    servicio?: ServicioCreateNestedOneWithoutItemsInput
  }

  export type ItemUncheckedCreateInput = {
    id?: number
    presupuestoId: number
    productoId?: number | null
    servicioId?: number | null
    cantidad: number
    precioUnitario: number
  }

  export type ItemUpdateInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    presupuesto?: PresupuestoUpdateOneRequiredWithoutItemsNestedInput
    producto?: ProductoUpdateOneWithoutItemsNestedInput
    servicio?: ServicioUpdateOneWithoutItemsNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    presupuestoId?: IntFieldUpdateOperationsInput | number
    productoId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: NullableIntFieldUpdateOperationsInput | number | null
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
  }

  export type ItemCreateManyInput = {
    id?: number
    presupuestoId: number
    productoId?: number | null
    servicioId?: number | null
    cantidad: number
    precioUnitario: number
  }

  export type ItemUpdateManyMutationInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
  }

  export type ItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    presupuestoId?: IntFieldUpdateOperationsInput | number
    productoId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: NullableIntFieldUpdateOperationsInput | number | null
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
  }

  export type FacturaCreateInput = {
    numero: string
    fecha: Date | string
    subtotal: number
    impuestos: number
    total: number
    estado: $Enums.EstadoFactura
    createdAt?: Date | string
    updatedAt?: Date | string
    presupuesto: PresupuestoCreateNestedOneWithoutFacturaInput
    impuestoAplicado: ImpuestoCreateNestedOneWithoutFacturasInput
  }

  export type FacturaUncheckedCreateInput = {
    id?: number
    numero: string
    presupuestoId: number
    fecha: Date | string
    subtotal: number
    impuestos: number
    total: number
    estado: $Enums.EstadoFactura
    impuestoAplicadoId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacturaUpdateInput = {
    numero?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presupuesto?: PresupuestoUpdateOneRequiredWithoutFacturaNestedInput
    impuestoAplicado?: ImpuestoUpdateOneRequiredWithoutFacturasNestedInput
  }

  export type FacturaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    presupuestoId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    impuestoAplicadoId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaCreateManyInput = {
    id?: number
    numero: string
    presupuestoId: number
    fecha: Date | string
    subtotal: number
    impuestos: number
    total: number
    estado: $Enums.EstadoFactura
    impuestoAplicadoId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacturaUpdateManyMutationInput = {
    numero?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    presupuestoId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    impuestoAplicadoId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReciboCreateInput = {
    concepto: string
    monto: number
    fecha: Date | string
    metodoPago: string
    createdAt?: Date | string
    updatedAt?: Date | string
    persona: PersonaCreateNestedOneWithoutRecibosInput
  }

  export type ReciboUncheckedCreateInput = {
    id?: number
    personaId: number
    concepto: string
    monto: number
    fecha: Date | string
    metodoPago: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReciboUpdateInput = {
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: FloatFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPago?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    persona?: PersonaUpdateOneRequiredWithoutRecibosNestedInput
  }

  export type ReciboUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    personaId?: IntFieldUpdateOperationsInput | number
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: FloatFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPago?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReciboCreateManyInput = {
    id?: number
    personaId: number
    concepto: string
    monto: number
    fecha: Date | string
    metodoPago: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReciboUpdateManyMutationInput = {
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: FloatFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPago?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReciboUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    personaId?: IntFieldUpdateOperationsInput | number
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: FloatFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPago?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImpuestoCreateInput = {
    nombre: string
    porcentaje: number
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    facturas?: FacturaCreateNestedManyWithoutImpuestoAplicadoInput
  }

  export type ImpuestoUncheckedCreateInput = {
    id?: number
    nombre: string
    porcentaje: number
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    facturas?: FacturaUncheckedCreateNestedManyWithoutImpuestoAplicadoInput
  }

  export type ImpuestoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    porcentaje?: FloatFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    facturas?: FacturaUpdateManyWithoutImpuestoAplicadoNestedInput
  }

  export type ImpuestoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    porcentaje?: FloatFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    facturas?: FacturaUncheckedUpdateManyWithoutImpuestoAplicadoNestedInput
  }

  export type ImpuestoCreateManyInput = {
    id?: number
    nombre: string
    porcentaje: number
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImpuestoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    porcentaje?: FloatFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImpuestoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    porcentaje?: FloatFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumTipoPersonaFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoPersona | EnumTipoPersonaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoPersona[] | ListEnumTipoPersonaFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoPersona[] | ListEnumTipoPersonaFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoPersonaFilter<$PrismaModel> | $Enums.TipoPersona
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRolUsuarioNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel> | null
    has?: $Enums.RolUsuario | EnumRolUsuarioFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel>
    hasSome?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProductoListRelationFilter = {
    every?: ProductoWhereInput
    some?: ProductoWhereInput
    none?: ProductoWhereInput
  }

  export type ServicioListRelationFilter = {
    every?: ServicioWhereInput
    some?: ServicioWhereInput
    none?: ServicioWhereInput
  }

  export type PresupuestoListRelationFilter = {
    every?: PresupuestoWhereInput
    some?: PresupuestoWhereInput
    none?: PresupuestoWhereInput
  }

  export type ReciboListRelationFilter = {
    every?: ReciboWhereInput
    some?: ReciboWhereInput
    none?: ReciboWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProductoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServicioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PresupuestoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReciboOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    telefono?: SortOrder
    cvu?: SortOrder
    roles?: SortOrder
    password?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PersonaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PersonaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    telefono?: SortOrder
    cvu?: SortOrder
    password?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PersonaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    telefono?: SortOrder
    cvu?: SortOrder
    password?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PersonaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumTipoPersonaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoPersona | EnumTipoPersonaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoPersona[] | ListEnumTipoPersonaFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoPersona[] | ListEnumTipoPersonaFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoPersonaWithAggregatesFilter<$PrismaModel> | $Enums.TipoPersona
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoPersonaFilter<$PrismaModel>
    _max?: NestedEnumTipoPersonaFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PersonaScalarRelationFilter = {
    is?: PersonaWhereInput
    isNot?: PersonaWhereInput
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type ItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductoAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
  }

  export type ProductoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductoSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ServicioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServicioAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
  }

  export type ServicioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServicioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServicioSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    proveedorId?: SortOrder
  }

  export type EnumEstadoPresupuestoFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoPresupuesto | EnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoPresupuesto[] | ListEnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoPresupuesto[] | ListEnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoPresupuestoFilter<$PrismaModel> | $Enums.EstadoPresupuesto
  }

  export type FacturaNullableScalarRelationFilter = {
    is?: FacturaWhereInput | null
    isNot?: FacturaWhereInput | null
  }

  export type PresupuestoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PresupuestoAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
  }

  export type PresupuestoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PresupuestoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PresupuestoSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
  }

  export type EnumEstadoPresupuestoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoPresupuesto | EnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoPresupuesto[] | ListEnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoPresupuesto[] | ListEnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoPresupuestoWithAggregatesFilter<$PrismaModel> | $Enums.EstadoPresupuesto
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoPresupuestoFilter<$PrismaModel>
    _max?: NestedEnumEstadoPresupuestoFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PresupuestoScalarRelationFilter = {
    is?: PresupuestoWhereInput
    isNot?: PresupuestoWhereInput
  }

  export type ProductoNullableScalarRelationFilter = {
    is?: ProductoWhereInput | null
    isNot?: ProductoWhereInput | null
  }

  export type ServicioNullableScalarRelationFilter = {
    is?: ServicioWhereInput | null
    isNot?: ServicioWhereInput | null
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    presupuestoId?: SortOrder
    productoId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type ItemAvgOrderByAggregateInput = {
    id?: SortOrder
    presupuestoId?: SortOrder
    productoId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    presupuestoId?: SortOrder
    productoId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    presupuestoId?: SortOrder
    productoId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type ItemSumOrderByAggregateInput = {
    id?: SortOrder
    presupuestoId?: SortOrder
    productoId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumEstadoFacturaFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFactura | EnumEstadoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaFilter<$PrismaModel> | $Enums.EstadoFactura
  }

  export type ImpuestoScalarRelationFilter = {
    is?: ImpuestoWhereInput
    isNot?: ImpuestoWhereInput
  }

  export type FacturaCountOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    presupuestoId?: SortOrder
    fecha?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    estado?: SortOrder
    impuestoAplicadoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacturaAvgOrderByAggregateInput = {
    id?: SortOrder
    presupuestoId?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    impuestoAplicadoId?: SortOrder
  }

  export type FacturaMaxOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    presupuestoId?: SortOrder
    fecha?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    estado?: SortOrder
    impuestoAplicadoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacturaMinOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    presupuestoId?: SortOrder
    fecha?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    estado?: SortOrder
    impuestoAplicadoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacturaSumOrderByAggregateInput = {
    id?: SortOrder
    presupuestoId?: SortOrder
    subtotal?: SortOrder
    impuestos?: SortOrder
    total?: SortOrder
    impuestoAplicadoId?: SortOrder
  }

  export type EnumEstadoFacturaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFactura | EnumEstadoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaWithAggregatesFilter<$PrismaModel> | $Enums.EstadoFactura
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoFacturaFilter<$PrismaModel>
    _max?: NestedEnumEstadoFacturaFilter<$PrismaModel>
  }

  export type ReciboCountOrderByAggregateInput = {
    id?: SortOrder
    personaId?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    fecha?: SortOrder
    metodoPago?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReciboAvgOrderByAggregateInput = {
    id?: SortOrder
    personaId?: SortOrder
    monto?: SortOrder
  }

  export type ReciboMaxOrderByAggregateInput = {
    id?: SortOrder
    personaId?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    fecha?: SortOrder
    metodoPago?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReciboMinOrderByAggregateInput = {
    id?: SortOrder
    personaId?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    fecha?: SortOrder
    metodoPago?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReciboSumOrderByAggregateInput = {
    id?: SortOrder
    personaId?: SortOrder
    monto?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FacturaListRelationFilter = {
    every?: FacturaWhereInput
    some?: FacturaWhereInput
    none?: FacturaWhereInput
  }

  export type FacturaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImpuestoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    porcentaje?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImpuestoAvgOrderByAggregateInput = {
    id?: SortOrder
    porcentaje?: SortOrder
  }

  export type ImpuestoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    porcentaje?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImpuestoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    porcentaje?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImpuestoSumOrderByAggregateInput = {
    id?: SortOrder
    porcentaje?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PersonaCreaterolesInput = {
    set: $Enums.RolUsuario[]
  }

  export type ProductoCreateNestedManyWithoutProveedorInput = {
    create?: XOR<ProductoCreateWithoutProveedorInput, ProductoUncheckedCreateWithoutProveedorInput> | ProductoCreateWithoutProveedorInput[] | ProductoUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: ProductoCreateOrConnectWithoutProveedorInput | ProductoCreateOrConnectWithoutProveedorInput[]
    createMany?: ProductoCreateManyProveedorInputEnvelope
    connect?: ProductoWhereUniqueInput | ProductoWhereUniqueInput[]
  }

  export type ServicioCreateNestedManyWithoutProveedorInput = {
    create?: XOR<ServicioCreateWithoutProveedorInput, ServicioUncheckedCreateWithoutProveedorInput> | ServicioCreateWithoutProveedorInput[] | ServicioUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutProveedorInput | ServicioCreateOrConnectWithoutProveedorInput[]
    createMany?: ServicioCreateManyProveedorInputEnvelope
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
  }

  export type PresupuestoCreateNestedManyWithoutClienteInput = {
    create?: XOR<PresupuestoCreateWithoutClienteInput, PresupuestoUncheckedCreateWithoutClienteInput> | PresupuestoCreateWithoutClienteInput[] | PresupuestoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PresupuestoCreateOrConnectWithoutClienteInput | PresupuestoCreateOrConnectWithoutClienteInput[]
    createMany?: PresupuestoCreateManyClienteInputEnvelope
    connect?: PresupuestoWhereUniqueInput | PresupuestoWhereUniqueInput[]
  }

  export type ReciboCreateNestedManyWithoutPersonaInput = {
    create?: XOR<ReciboCreateWithoutPersonaInput, ReciboUncheckedCreateWithoutPersonaInput> | ReciboCreateWithoutPersonaInput[] | ReciboUncheckedCreateWithoutPersonaInput[]
    connectOrCreate?: ReciboCreateOrConnectWithoutPersonaInput | ReciboCreateOrConnectWithoutPersonaInput[]
    createMany?: ReciboCreateManyPersonaInputEnvelope
    connect?: ReciboWhereUniqueInput | ReciboWhereUniqueInput[]
  }

  export type ProductoUncheckedCreateNestedManyWithoutProveedorInput = {
    create?: XOR<ProductoCreateWithoutProveedorInput, ProductoUncheckedCreateWithoutProveedorInput> | ProductoCreateWithoutProveedorInput[] | ProductoUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: ProductoCreateOrConnectWithoutProveedorInput | ProductoCreateOrConnectWithoutProveedorInput[]
    createMany?: ProductoCreateManyProveedorInputEnvelope
    connect?: ProductoWhereUniqueInput | ProductoWhereUniqueInput[]
  }

  export type ServicioUncheckedCreateNestedManyWithoutProveedorInput = {
    create?: XOR<ServicioCreateWithoutProveedorInput, ServicioUncheckedCreateWithoutProveedorInput> | ServicioCreateWithoutProveedorInput[] | ServicioUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutProveedorInput | ServicioCreateOrConnectWithoutProveedorInput[]
    createMany?: ServicioCreateManyProveedorInputEnvelope
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
  }

  export type PresupuestoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<PresupuestoCreateWithoutClienteInput, PresupuestoUncheckedCreateWithoutClienteInput> | PresupuestoCreateWithoutClienteInput[] | PresupuestoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PresupuestoCreateOrConnectWithoutClienteInput | PresupuestoCreateOrConnectWithoutClienteInput[]
    createMany?: PresupuestoCreateManyClienteInputEnvelope
    connect?: PresupuestoWhereUniqueInput | PresupuestoWhereUniqueInput[]
  }

  export type ReciboUncheckedCreateNestedManyWithoutPersonaInput = {
    create?: XOR<ReciboCreateWithoutPersonaInput, ReciboUncheckedCreateWithoutPersonaInput> | ReciboCreateWithoutPersonaInput[] | ReciboUncheckedCreateWithoutPersonaInput[]
    connectOrCreate?: ReciboCreateOrConnectWithoutPersonaInput | ReciboCreateOrConnectWithoutPersonaInput[]
    createMany?: ReciboCreateManyPersonaInputEnvelope
    connect?: ReciboWhereUniqueInput | ReciboWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumTipoPersonaFieldUpdateOperationsInput = {
    set?: $Enums.TipoPersona
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PersonaUpdaterolesInput = {
    set?: $Enums.RolUsuario[]
    push?: $Enums.RolUsuario | $Enums.RolUsuario[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProductoUpdateManyWithoutProveedorNestedInput = {
    create?: XOR<ProductoCreateWithoutProveedorInput, ProductoUncheckedCreateWithoutProveedorInput> | ProductoCreateWithoutProveedorInput[] | ProductoUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: ProductoCreateOrConnectWithoutProveedorInput | ProductoCreateOrConnectWithoutProveedorInput[]
    upsert?: ProductoUpsertWithWhereUniqueWithoutProveedorInput | ProductoUpsertWithWhereUniqueWithoutProveedorInput[]
    createMany?: ProductoCreateManyProveedorInputEnvelope
    set?: ProductoWhereUniqueInput | ProductoWhereUniqueInput[]
    disconnect?: ProductoWhereUniqueInput | ProductoWhereUniqueInput[]
    delete?: ProductoWhereUniqueInput | ProductoWhereUniqueInput[]
    connect?: ProductoWhereUniqueInput | ProductoWhereUniqueInput[]
    update?: ProductoUpdateWithWhereUniqueWithoutProveedorInput | ProductoUpdateWithWhereUniqueWithoutProveedorInput[]
    updateMany?: ProductoUpdateManyWithWhereWithoutProveedorInput | ProductoUpdateManyWithWhereWithoutProveedorInput[]
    deleteMany?: ProductoScalarWhereInput | ProductoScalarWhereInput[]
  }

  export type ServicioUpdateManyWithoutProveedorNestedInput = {
    create?: XOR<ServicioCreateWithoutProveedorInput, ServicioUncheckedCreateWithoutProveedorInput> | ServicioCreateWithoutProveedorInput[] | ServicioUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutProveedorInput | ServicioCreateOrConnectWithoutProveedorInput[]
    upsert?: ServicioUpsertWithWhereUniqueWithoutProveedorInput | ServicioUpsertWithWhereUniqueWithoutProveedorInput[]
    createMany?: ServicioCreateManyProveedorInputEnvelope
    set?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    disconnect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    delete?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    update?: ServicioUpdateWithWhereUniqueWithoutProveedorInput | ServicioUpdateWithWhereUniqueWithoutProveedorInput[]
    updateMany?: ServicioUpdateManyWithWhereWithoutProveedorInput | ServicioUpdateManyWithWhereWithoutProveedorInput[]
    deleteMany?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
  }

  export type PresupuestoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<PresupuestoCreateWithoutClienteInput, PresupuestoUncheckedCreateWithoutClienteInput> | PresupuestoCreateWithoutClienteInput[] | PresupuestoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PresupuestoCreateOrConnectWithoutClienteInput | PresupuestoCreateOrConnectWithoutClienteInput[]
    upsert?: PresupuestoUpsertWithWhereUniqueWithoutClienteInput | PresupuestoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: PresupuestoCreateManyClienteInputEnvelope
    set?: PresupuestoWhereUniqueInput | PresupuestoWhereUniqueInput[]
    disconnect?: PresupuestoWhereUniqueInput | PresupuestoWhereUniqueInput[]
    delete?: PresupuestoWhereUniqueInput | PresupuestoWhereUniqueInput[]
    connect?: PresupuestoWhereUniqueInput | PresupuestoWhereUniqueInput[]
    update?: PresupuestoUpdateWithWhereUniqueWithoutClienteInput | PresupuestoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: PresupuestoUpdateManyWithWhereWithoutClienteInput | PresupuestoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: PresupuestoScalarWhereInput | PresupuestoScalarWhereInput[]
  }

  export type ReciboUpdateManyWithoutPersonaNestedInput = {
    create?: XOR<ReciboCreateWithoutPersonaInput, ReciboUncheckedCreateWithoutPersonaInput> | ReciboCreateWithoutPersonaInput[] | ReciboUncheckedCreateWithoutPersonaInput[]
    connectOrCreate?: ReciboCreateOrConnectWithoutPersonaInput | ReciboCreateOrConnectWithoutPersonaInput[]
    upsert?: ReciboUpsertWithWhereUniqueWithoutPersonaInput | ReciboUpsertWithWhereUniqueWithoutPersonaInput[]
    createMany?: ReciboCreateManyPersonaInputEnvelope
    set?: ReciboWhereUniqueInput | ReciboWhereUniqueInput[]
    disconnect?: ReciboWhereUniqueInput | ReciboWhereUniqueInput[]
    delete?: ReciboWhereUniqueInput | ReciboWhereUniqueInput[]
    connect?: ReciboWhereUniqueInput | ReciboWhereUniqueInput[]
    update?: ReciboUpdateWithWhereUniqueWithoutPersonaInput | ReciboUpdateWithWhereUniqueWithoutPersonaInput[]
    updateMany?: ReciboUpdateManyWithWhereWithoutPersonaInput | ReciboUpdateManyWithWhereWithoutPersonaInput[]
    deleteMany?: ReciboScalarWhereInput | ReciboScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductoUncheckedUpdateManyWithoutProveedorNestedInput = {
    create?: XOR<ProductoCreateWithoutProveedorInput, ProductoUncheckedCreateWithoutProveedorInput> | ProductoCreateWithoutProveedorInput[] | ProductoUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: ProductoCreateOrConnectWithoutProveedorInput | ProductoCreateOrConnectWithoutProveedorInput[]
    upsert?: ProductoUpsertWithWhereUniqueWithoutProveedorInput | ProductoUpsertWithWhereUniqueWithoutProveedorInput[]
    createMany?: ProductoCreateManyProveedorInputEnvelope
    set?: ProductoWhereUniqueInput | ProductoWhereUniqueInput[]
    disconnect?: ProductoWhereUniqueInput | ProductoWhereUniqueInput[]
    delete?: ProductoWhereUniqueInput | ProductoWhereUniqueInput[]
    connect?: ProductoWhereUniqueInput | ProductoWhereUniqueInput[]
    update?: ProductoUpdateWithWhereUniqueWithoutProveedorInput | ProductoUpdateWithWhereUniqueWithoutProveedorInput[]
    updateMany?: ProductoUpdateManyWithWhereWithoutProveedorInput | ProductoUpdateManyWithWhereWithoutProveedorInput[]
    deleteMany?: ProductoScalarWhereInput | ProductoScalarWhereInput[]
  }

  export type ServicioUncheckedUpdateManyWithoutProveedorNestedInput = {
    create?: XOR<ServicioCreateWithoutProveedorInput, ServicioUncheckedCreateWithoutProveedorInput> | ServicioCreateWithoutProveedorInput[] | ServicioUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutProveedorInput | ServicioCreateOrConnectWithoutProveedorInput[]
    upsert?: ServicioUpsertWithWhereUniqueWithoutProveedorInput | ServicioUpsertWithWhereUniqueWithoutProveedorInput[]
    createMany?: ServicioCreateManyProveedorInputEnvelope
    set?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    disconnect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    delete?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    update?: ServicioUpdateWithWhereUniqueWithoutProveedorInput | ServicioUpdateWithWhereUniqueWithoutProveedorInput[]
    updateMany?: ServicioUpdateManyWithWhereWithoutProveedorInput | ServicioUpdateManyWithWhereWithoutProveedorInput[]
    deleteMany?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
  }

  export type PresupuestoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<PresupuestoCreateWithoutClienteInput, PresupuestoUncheckedCreateWithoutClienteInput> | PresupuestoCreateWithoutClienteInput[] | PresupuestoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PresupuestoCreateOrConnectWithoutClienteInput | PresupuestoCreateOrConnectWithoutClienteInput[]
    upsert?: PresupuestoUpsertWithWhereUniqueWithoutClienteInput | PresupuestoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: PresupuestoCreateManyClienteInputEnvelope
    set?: PresupuestoWhereUniqueInput | PresupuestoWhereUniqueInput[]
    disconnect?: PresupuestoWhereUniqueInput | PresupuestoWhereUniqueInput[]
    delete?: PresupuestoWhereUniqueInput | PresupuestoWhereUniqueInput[]
    connect?: PresupuestoWhereUniqueInput | PresupuestoWhereUniqueInput[]
    update?: PresupuestoUpdateWithWhereUniqueWithoutClienteInput | PresupuestoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: PresupuestoUpdateManyWithWhereWithoutClienteInput | PresupuestoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: PresupuestoScalarWhereInput | PresupuestoScalarWhereInput[]
  }

  export type ReciboUncheckedUpdateManyWithoutPersonaNestedInput = {
    create?: XOR<ReciboCreateWithoutPersonaInput, ReciboUncheckedCreateWithoutPersonaInput> | ReciboCreateWithoutPersonaInput[] | ReciboUncheckedCreateWithoutPersonaInput[]
    connectOrCreate?: ReciboCreateOrConnectWithoutPersonaInput | ReciboCreateOrConnectWithoutPersonaInput[]
    upsert?: ReciboUpsertWithWhereUniqueWithoutPersonaInput | ReciboUpsertWithWhereUniqueWithoutPersonaInput[]
    createMany?: ReciboCreateManyPersonaInputEnvelope
    set?: ReciboWhereUniqueInput | ReciboWhereUniqueInput[]
    disconnect?: ReciboWhereUniqueInput | ReciboWhereUniqueInput[]
    delete?: ReciboWhereUniqueInput | ReciboWhereUniqueInput[]
    connect?: ReciboWhereUniqueInput | ReciboWhereUniqueInput[]
    update?: ReciboUpdateWithWhereUniqueWithoutPersonaInput | ReciboUpdateWithWhereUniqueWithoutPersonaInput[]
    updateMany?: ReciboUpdateManyWithWhereWithoutPersonaInput | ReciboUpdateManyWithWhereWithoutPersonaInput[]
    deleteMany?: ReciboScalarWhereInput | ReciboScalarWhereInput[]
  }

  export type PersonaCreateNestedOneWithoutProductosInput = {
    create?: XOR<PersonaCreateWithoutProductosInput, PersonaUncheckedCreateWithoutProductosInput>
    connectOrCreate?: PersonaCreateOrConnectWithoutProductosInput
    connect?: PersonaWhereUniqueInput
  }

  export type ItemCreateNestedManyWithoutProductoInput = {
    create?: XOR<ItemCreateWithoutProductoInput, ItemUncheckedCreateWithoutProductoInput> | ItemCreateWithoutProductoInput[] | ItemUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutProductoInput | ItemCreateOrConnectWithoutProductoInput[]
    createMany?: ItemCreateManyProductoInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<ItemCreateWithoutProductoInput, ItemUncheckedCreateWithoutProductoInput> | ItemCreateWithoutProductoInput[] | ItemUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutProductoInput | ItemCreateOrConnectWithoutProductoInput[]
    createMany?: ItemCreateManyProductoInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PersonaUpdateOneRequiredWithoutProductosNestedInput = {
    create?: XOR<PersonaCreateWithoutProductosInput, PersonaUncheckedCreateWithoutProductosInput>
    connectOrCreate?: PersonaCreateOrConnectWithoutProductosInput
    upsert?: PersonaUpsertWithoutProductosInput
    connect?: PersonaWhereUniqueInput
    update?: XOR<XOR<PersonaUpdateToOneWithWhereWithoutProductosInput, PersonaUpdateWithoutProductosInput>, PersonaUncheckedUpdateWithoutProductosInput>
  }

  export type ItemUpdateManyWithoutProductoNestedInput = {
    create?: XOR<ItemCreateWithoutProductoInput, ItemUncheckedCreateWithoutProductoInput> | ItemCreateWithoutProductoInput[] | ItemUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutProductoInput | ItemCreateOrConnectWithoutProductoInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutProductoInput | ItemUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: ItemCreateManyProductoInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutProductoInput | ItemUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutProductoInput | ItemUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<ItemCreateWithoutProductoInput, ItemUncheckedCreateWithoutProductoInput> | ItemCreateWithoutProductoInput[] | ItemUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutProductoInput | ItemCreateOrConnectWithoutProductoInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutProductoInput | ItemUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: ItemCreateManyProductoInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutProductoInput | ItemUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutProductoInput | ItemUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type PersonaCreateNestedOneWithoutServiciosInput = {
    create?: XOR<PersonaCreateWithoutServiciosInput, PersonaUncheckedCreateWithoutServiciosInput>
    connectOrCreate?: PersonaCreateOrConnectWithoutServiciosInput
    connect?: PersonaWhereUniqueInput
  }

  export type ItemCreateNestedManyWithoutServicioInput = {
    create?: XOR<ItemCreateWithoutServicioInput, ItemUncheckedCreateWithoutServicioInput> | ItemCreateWithoutServicioInput[] | ItemUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutServicioInput | ItemCreateOrConnectWithoutServicioInput[]
    createMany?: ItemCreateManyServicioInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutServicioInput = {
    create?: XOR<ItemCreateWithoutServicioInput, ItemUncheckedCreateWithoutServicioInput> | ItemCreateWithoutServicioInput[] | ItemUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutServicioInput | ItemCreateOrConnectWithoutServicioInput[]
    createMany?: ItemCreateManyServicioInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type PersonaUpdateOneRequiredWithoutServiciosNestedInput = {
    create?: XOR<PersonaCreateWithoutServiciosInput, PersonaUncheckedCreateWithoutServiciosInput>
    connectOrCreate?: PersonaCreateOrConnectWithoutServiciosInput
    upsert?: PersonaUpsertWithoutServiciosInput
    connect?: PersonaWhereUniqueInput
    update?: XOR<XOR<PersonaUpdateToOneWithWhereWithoutServiciosInput, PersonaUpdateWithoutServiciosInput>, PersonaUncheckedUpdateWithoutServiciosInput>
  }

  export type ItemUpdateManyWithoutServicioNestedInput = {
    create?: XOR<ItemCreateWithoutServicioInput, ItemUncheckedCreateWithoutServicioInput> | ItemCreateWithoutServicioInput[] | ItemUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutServicioInput | ItemCreateOrConnectWithoutServicioInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutServicioInput | ItemUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: ItemCreateManyServicioInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutServicioInput | ItemUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutServicioInput | ItemUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutServicioNestedInput = {
    create?: XOR<ItemCreateWithoutServicioInput, ItemUncheckedCreateWithoutServicioInput> | ItemCreateWithoutServicioInput[] | ItemUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutServicioInput | ItemCreateOrConnectWithoutServicioInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutServicioInput | ItemUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: ItemCreateManyServicioInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutServicioInput | ItemUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutServicioInput | ItemUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type PersonaCreateNestedOneWithoutPresupuestosInput = {
    create?: XOR<PersonaCreateWithoutPresupuestosInput, PersonaUncheckedCreateWithoutPresupuestosInput>
    connectOrCreate?: PersonaCreateOrConnectWithoutPresupuestosInput
    connect?: PersonaWhereUniqueInput
  }

  export type ItemCreateNestedManyWithoutPresupuestoInput = {
    create?: XOR<ItemCreateWithoutPresupuestoInput, ItemUncheckedCreateWithoutPresupuestoInput> | ItemCreateWithoutPresupuestoInput[] | ItemUncheckedCreateWithoutPresupuestoInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutPresupuestoInput | ItemCreateOrConnectWithoutPresupuestoInput[]
    createMany?: ItemCreateManyPresupuestoInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type FacturaCreateNestedOneWithoutPresupuestoInput = {
    create?: XOR<FacturaCreateWithoutPresupuestoInput, FacturaUncheckedCreateWithoutPresupuestoInput>
    connectOrCreate?: FacturaCreateOrConnectWithoutPresupuestoInput
    connect?: FacturaWhereUniqueInput
  }

  export type ItemUncheckedCreateNestedManyWithoutPresupuestoInput = {
    create?: XOR<ItemCreateWithoutPresupuestoInput, ItemUncheckedCreateWithoutPresupuestoInput> | ItemCreateWithoutPresupuestoInput[] | ItemUncheckedCreateWithoutPresupuestoInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutPresupuestoInput | ItemCreateOrConnectWithoutPresupuestoInput[]
    createMany?: ItemCreateManyPresupuestoInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type FacturaUncheckedCreateNestedOneWithoutPresupuestoInput = {
    create?: XOR<FacturaCreateWithoutPresupuestoInput, FacturaUncheckedCreateWithoutPresupuestoInput>
    connectOrCreate?: FacturaCreateOrConnectWithoutPresupuestoInput
    connect?: FacturaWhereUniqueInput
  }

  export type EnumEstadoPresupuestoFieldUpdateOperationsInput = {
    set?: $Enums.EstadoPresupuesto
  }

  export type PersonaUpdateOneRequiredWithoutPresupuestosNestedInput = {
    create?: XOR<PersonaCreateWithoutPresupuestosInput, PersonaUncheckedCreateWithoutPresupuestosInput>
    connectOrCreate?: PersonaCreateOrConnectWithoutPresupuestosInput
    upsert?: PersonaUpsertWithoutPresupuestosInput
    connect?: PersonaWhereUniqueInput
    update?: XOR<XOR<PersonaUpdateToOneWithWhereWithoutPresupuestosInput, PersonaUpdateWithoutPresupuestosInput>, PersonaUncheckedUpdateWithoutPresupuestosInput>
  }

  export type ItemUpdateManyWithoutPresupuestoNestedInput = {
    create?: XOR<ItemCreateWithoutPresupuestoInput, ItemUncheckedCreateWithoutPresupuestoInput> | ItemCreateWithoutPresupuestoInput[] | ItemUncheckedCreateWithoutPresupuestoInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutPresupuestoInput | ItemCreateOrConnectWithoutPresupuestoInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutPresupuestoInput | ItemUpsertWithWhereUniqueWithoutPresupuestoInput[]
    createMany?: ItemCreateManyPresupuestoInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutPresupuestoInput | ItemUpdateWithWhereUniqueWithoutPresupuestoInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutPresupuestoInput | ItemUpdateManyWithWhereWithoutPresupuestoInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type FacturaUpdateOneWithoutPresupuestoNestedInput = {
    create?: XOR<FacturaCreateWithoutPresupuestoInput, FacturaUncheckedCreateWithoutPresupuestoInput>
    connectOrCreate?: FacturaCreateOrConnectWithoutPresupuestoInput
    upsert?: FacturaUpsertWithoutPresupuestoInput
    disconnect?: FacturaWhereInput | boolean
    delete?: FacturaWhereInput | boolean
    connect?: FacturaWhereUniqueInput
    update?: XOR<XOR<FacturaUpdateToOneWithWhereWithoutPresupuestoInput, FacturaUpdateWithoutPresupuestoInput>, FacturaUncheckedUpdateWithoutPresupuestoInput>
  }

  export type ItemUncheckedUpdateManyWithoutPresupuestoNestedInput = {
    create?: XOR<ItemCreateWithoutPresupuestoInput, ItemUncheckedCreateWithoutPresupuestoInput> | ItemCreateWithoutPresupuestoInput[] | ItemUncheckedCreateWithoutPresupuestoInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutPresupuestoInput | ItemCreateOrConnectWithoutPresupuestoInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutPresupuestoInput | ItemUpsertWithWhereUniqueWithoutPresupuestoInput[]
    createMany?: ItemCreateManyPresupuestoInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutPresupuestoInput | ItemUpdateWithWhereUniqueWithoutPresupuestoInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutPresupuestoInput | ItemUpdateManyWithWhereWithoutPresupuestoInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type FacturaUncheckedUpdateOneWithoutPresupuestoNestedInput = {
    create?: XOR<FacturaCreateWithoutPresupuestoInput, FacturaUncheckedCreateWithoutPresupuestoInput>
    connectOrCreate?: FacturaCreateOrConnectWithoutPresupuestoInput
    upsert?: FacturaUpsertWithoutPresupuestoInput
    disconnect?: FacturaWhereInput | boolean
    delete?: FacturaWhereInput | boolean
    connect?: FacturaWhereUniqueInput
    update?: XOR<XOR<FacturaUpdateToOneWithWhereWithoutPresupuestoInput, FacturaUpdateWithoutPresupuestoInput>, FacturaUncheckedUpdateWithoutPresupuestoInput>
  }

  export type PresupuestoCreateNestedOneWithoutItemsInput = {
    create?: XOR<PresupuestoCreateWithoutItemsInput, PresupuestoUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PresupuestoCreateOrConnectWithoutItemsInput
    connect?: PresupuestoWhereUniqueInput
  }

  export type ProductoCreateNestedOneWithoutItemsInput = {
    create?: XOR<ProductoCreateWithoutItemsInput, ProductoUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutItemsInput
    connect?: ProductoWhereUniqueInput
  }

  export type ServicioCreateNestedOneWithoutItemsInput = {
    create?: XOR<ServicioCreateWithoutItemsInput, ServicioUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutItemsInput
    connect?: ServicioWhereUniqueInput
  }

  export type PresupuestoUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<PresupuestoCreateWithoutItemsInput, PresupuestoUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PresupuestoCreateOrConnectWithoutItemsInput
    upsert?: PresupuestoUpsertWithoutItemsInput
    connect?: PresupuestoWhereUniqueInput
    update?: XOR<XOR<PresupuestoUpdateToOneWithWhereWithoutItemsInput, PresupuestoUpdateWithoutItemsInput>, PresupuestoUncheckedUpdateWithoutItemsInput>
  }

  export type ProductoUpdateOneWithoutItemsNestedInput = {
    create?: XOR<ProductoCreateWithoutItemsInput, ProductoUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutItemsInput
    upsert?: ProductoUpsertWithoutItemsInput
    disconnect?: ProductoWhereInput | boolean
    delete?: ProductoWhereInput | boolean
    connect?: ProductoWhereUniqueInput
    update?: XOR<XOR<ProductoUpdateToOneWithWhereWithoutItemsInput, ProductoUpdateWithoutItemsInput>, ProductoUncheckedUpdateWithoutItemsInput>
  }

  export type ServicioUpdateOneWithoutItemsNestedInput = {
    create?: XOR<ServicioCreateWithoutItemsInput, ServicioUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutItemsInput
    upsert?: ServicioUpsertWithoutItemsInput
    disconnect?: ServicioWhereInput | boolean
    delete?: ServicioWhereInput | boolean
    connect?: ServicioWhereUniqueInput
    update?: XOR<XOR<ServicioUpdateToOneWithWhereWithoutItemsInput, ServicioUpdateWithoutItemsInput>, ServicioUncheckedUpdateWithoutItemsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PresupuestoCreateNestedOneWithoutFacturaInput = {
    create?: XOR<PresupuestoCreateWithoutFacturaInput, PresupuestoUncheckedCreateWithoutFacturaInput>
    connectOrCreate?: PresupuestoCreateOrConnectWithoutFacturaInput
    connect?: PresupuestoWhereUniqueInput
  }

  export type ImpuestoCreateNestedOneWithoutFacturasInput = {
    create?: XOR<ImpuestoCreateWithoutFacturasInput, ImpuestoUncheckedCreateWithoutFacturasInput>
    connectOrCreate?: ImpuestoCreateOrConnectWithoutFacturasInput
    connect?: ImpuestoWhereUniqueInput
  }

  export type EnumEstadoFacturaFieldUpdateOperationsInput = {
    set?: $Enums.EstadoFactura
  }

  export type PresupuestoUpdateOneRequiredWithoutFacturaNestedInput = {
    create?: XOR<PresupuestoCreateWithoutFacturaInput, PresupuestoUncheckedCreateWithoutFacturaInput>
    connectOrCreate?: PresupuestoCreateOrConnectWithoutFacturaInput
    upsert?: PresupuestoUpsertWithoutFacturaInput
    connect?: PresupuestoWhereUniqueInput
    update?: XOR<XOR<PresupuestoUpdateToOneWithWhereWithoutFacturaInput, PresupuestoUpdateWithoutFacturaInput>, PresupuestoUncheckedUpdateWithoutFacturaInput>
  }

  export type ImpuestoUpdateOneRequiredWithoutFacturasNestedInput = {
    create?: XOR<ImpuestoCreateWithoutFacturasInput, ImpuestoUncheckedCreateWithoutFacturasInput>
    connectOrCreate?: ImpuestoCreateOrConnectWithoutFacturasInput
    upsert?: ImpuestoUpsertWithoutFacturasInput
    connect?: ImpuestoWhereUniqueInput
    update?: XOR<XOR<ImpuestoUpdateToOneWithWhereWithoutFacturasInput, ImpuestoUpdateWithoutFacturasInput>, ImpuestoUncheckedUpdateWithoutFacturasInput>
  }

  export type PersonaCreateNestedOneWithoutRecibosInput = {
    create?: XOR<PersonaCreateWithoutRecibosInput, PersonaUncheckedCreateWithoutRecibosInput>
    connectOrCreate?: PersonaCreateOrConnectWithoutRecibosInput
    connect?: PersonaWhereUniqueInput
  }

  export type PersonaUpdateOneRequiredWithoutRecibosNestedInput = {
    create?: XOR<PersonaCreateWithoutRecibosInput, PersonaUncheckedCreateWithoutRecibosInput>
    connectOrCreate?: PersonaCreateOrConnectWithoutRecibosInput
    upsert?: PersonaUpsertWithoutRecibosInput
    connect?: PersonaWhereUniqueInput
    update?: XOR<XOR<PersonaUpdateToOneWithWhereWithoutRecibosInput, PersonaUpdateWithoutRecibosInput>, PersonaUncheckedUpdateWithoutRecibosInput>
  }

  export type FacturaCreateNestedManyWithoutImpuestoAplicadoInput = {
    create?: XOR<FacturaCreateWithoutImpuestoAplicadoInput, FacturaUncheckedCreateWithoutImpuestoAplicadoInput> | FacturaCreateWithoutImpuestoAplicadoInput[] | FacturaUncheckedCreateWithoutImpuestoAplicadoInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutImpuestoAplicadoInput | FacturaCreateOrConnectWithoutImpuestoAplicadoInput[]
    createMany?: FacturaCreateManyImpuestoAplicadoInputEnvelope
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
  }

  export type FacturaUncheckedCreateNestedManyWithoutImpuestoAplicadoInput = {
    create?: XOR<FacturaCreateWithoutImpuestoAplicadoInput, FacturaUncheckedCreateWithoutImpuestoAplicadoInput> | FacturaCreateWithoutImpuestoAplicadoInput[] | FacturaUncheckedCreateWithoutImpuestoAplicadoInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutImpuestoAplicadoInput | FacturaCreateOrConnectWithoutImpuestoAplicadoInput[]
    createMany?: FacturaCreateManyImpuestoAplicadoInputEnvelope
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FacturaUpdateManyWithoutImpuestoAplicadoNestedInput = {
    create?: XOR<FacturaCreateWithoutImpuestoAplicadoInput, FacturaUncheckedCreateWithoutImpuestoAplicadoInput> | FacturaCreateWithoutImpuestoAplicadoInput[] | FacturaUncheckedCreateWithoutImpuestoAplicadoInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutImpuestoAplicadoInput | FacturaCreateOrConnectWithoutImpuestoAplicadoInput[]
    upsert?: FacturaUpsertWithWhereUniqueWithoutImpuestoAplicadoInput | FacturaUpsertWithWhereUniqueWithoutImpuestoAplicadoInput[]
    createMany?: FacturaCreateManyImpuestoAplicadoInputEnvelope
    set?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    disconnect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    delete?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    update?: FacturaUpdateWithWhereUniqueWithoutImpuestoAplicadoInput | FacturaUpdateWithWhereUniqueWithoutImpuestoAplicadoInput[]
    updateMany?: FacturaUpdateManyWithWhereWithoutImpuestoAplicadoInput | FacturaUpdateManyWithWhereWithoutImpuestoAplicadoInput[]
    deleteMany?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
  }

  export type FacturaUncheckedUpdateManyWithoutImpuestoAplicadoNestedInput = {
    create?: XOR<FacturaCreateWithoutImpuestoAplicadoInput, FacturaUncheckedCreateWithoutImpuestoAplicadoInput> | FacturaCreateWithoutImpuestoAplicadoInput[] | FacturaUncheckedCreateWithoutImpuestoAplicadoInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutImpuestoAplicadoInput | FacturaCreateOrConnectWithoutImpuestoAplicadoInput[]
    upsert?: FacturaUpsertWithWhereUniqueWithoutImpuestoAplicadoInput | FacturaUpsertWithWhereUniqueWithoutImpuestoAplicadoInput[]
    createMany?: FacturaCreateManyImpuestoAplicadoInputEnvelope
    set?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    disconnect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    delete?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    update?: FacturaUpdateWithWhereUniqueWithoutImpuestoAplicadoInput | FacturaUpdateWithWhereUniqueWithoutImpuestoAplicadoInput[]
    updateMany?: FacturaUpdateManyWithWhereWithoutImpuestoAplicadoInput | FacturaUpdateManyWithWhereWithoutImpuestoAplicadoInput[]
    deleteMany?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumTipoPersonaFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoPersona | EnumTipoPersonaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoPersona[] | ListEnumTipoPersonaFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoPersona[] | ListEnumTipoPersonaFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoPersonaFilter<$PrismaModel> | $Enums.TipoPersona
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumTipoPersonaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoPersona | EnumTipoPersonaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoPersona[] | ListEnumTipoPersonaFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoPersona[] | ListEnumTipoPersonaFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoPersonaWithAggregatesFilter<$PrismaModel> | $Enums.TipoPersona
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoPersonaFilter<$PrismaModel>
    _max?: NestedEnumTipoPersonaFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumEstadoPresupuestoFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoPresupuesto | EnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoPresupuesto[] | ListEnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoPresupuesto[] | ListEnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoPresupuestoFilter<$PrismaModel> | $Enums.EstadoPresupuesto
  }

  export type NestedEnumEstadoPresupuestoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoPresupuesto | EnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoPresupuesto[] | ListEnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoPresupuesto[] | ListEnumEstadoPresupuestoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoPresupuestoWithAggregatesFilter<$PrismaModel> | $Enums.EstadoPresupuesto
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoPresupuestoFilter<$PrismaModel>
    _max?: NestedEnumEstadoPresupuestoFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumEstadoFacturaFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFactura | EnumEstadoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaFilter<$PrismaModel> | $Enums.EstadoFactura
  }

  export type NestedEnumEstadoFacturaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFactura | EnumEstadoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaWithAggregatesFilter<$PrismaModel> | $Enums.EstadoFactura
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoFacturaFilter<$PrismaModel>
    _max?: NestedEnumEstadoFacturaFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ProductoCreateWithoutProveedorInput = {
    nombre: string
    precio: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutProductoInput
  }

  export type ProductoUncheckedCreateWithoutProveedorInput = {
    id?: number
    nombre: string
    precio: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoCreateOrConnectWithoutProveedorInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutProveedorInput, ProductoUncheckedCreateWithoutProveedorInput>
  }

  export type ProductoCreateManyProveedorInputEnvelope = {
    data: ProductoCreateManyProveedorInput | ProductoCreateManyProveedorInput[]
    skipDuplicates?: boolean
  }

  export type ServicioCreateWithoutProveedorInput = {
    nombre: string
    descripcion: string
    precio: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateWithoutProveedorInput = {
    id?: number
    nombre: string
    descripcion: string
    precio: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioCreateOrConnectWithoutProveedorInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutProveedorInput, ServicioUncheckedCreateWithoutProveedorInput>
  }

  export type ServicioCreateManyProveedorInputEnvelope = {
    data: ServicioCreateManyProveedorInput | ServicioCreateManyProveedorInput[]
    skipDuplicates?: boolean
  }

  export type PresupuestoCreateWithoutClienteInput = {
    subtotal: number
    impuestos: number
    total: number
    estado?: $Enums.EstadoPresupuesto
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutPresupuestoInput
    factura?: FacturaCreateNestedOneWithoutPresupuestoInput
  }

  export type PresupuestoUncheckedCreateWithoutClienteInput = {
    id?: number
    subtotal: number
    impuestos: number
    total: number
    estado?: $Enums.EstadoPresupuesto
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutPresupuestoInput
    factura?: FacturaUncheckedCreateNestedOneWithoutPresupuestoInput
  }

  export type PresupuestoCreateOrConnectWithoutClienteInput = {
    where: PresupuestoWhereUniqueInput
    create: XOR<PresupuestoCreateWithoutClienteInput, PresupuestoUncheckedCreateWithoutClienteInput>
  }

  export type PresupuestoCreateManyClienteInputEnvelope = {
    data: PresupuestoCreateManyClienteInput | PresupuestoCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type ReciboCreateWithoutPersonaInput = {
    concepto: string
    monto: number
    fecha: Date | string
    metodoPago: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReciboUncheckedCreateWithoutPersonaInput = {
    id?: number
    concepto: string
    monto: number
    fecha: Date | string
    metodoPago: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReciboCreateOrConnectWithoutPersonaInput = {
    where: ReciboWhereUniqueInput
    create: XOR<ReciboCreateWithoutPersonaInput, ReciboUncheckedCreateWithoutPersonaInput>
  }

  export type ReciboCreateManyPersonaInputEnvelope = {
    data: ReciboCreateManyPersonaInput | ReciboCreateManyPersonaInput[]
    skipDuplicates?: boolean
  }

  export type ProductoUpsertWithWhereUniqueWithoutProveedorInput = {
    where: ProductoWhereUniqueInput
    update: XOR<ProductoUpdateWithoutProveedorInput, ProductoUncheckedUpdateWithoutProveedorInput>
    create: XOR<ProductoCreateWithoutProveedorInput, ProductoUncheckedCreateWithoutProveedorInput>
  }

  export type ProductoUpdateWithWhereUniqueWithoutProveedorInput = {
    where: ProductoWhereUniqueInput
    data: XOR<ProductoUpdateWithoutProveedorInput, ProductoUncheckedUpdateWithoutProveedorInput>
  }

  export type ProductoUpdateManyWithWhereWithoutProveedorInput = {
    where: ProductoScalarWhereInput
    data: XOR<ProductoUpdateManyMutationInput, ProductoUncheckedUpdateManyWithoutProveedorInput>
  }

  export type ProductoScalarWhereInput = {
    AND?: ProductoScalarWhereInput | ProductoScalarWhereInput[]
    OR?: ProductoScalarWhereInput[]
    NOT?: ProductoScalarWhereInput | ProductoScalarWhereInput[]
    id?: IntFilter<"Producto"> | number
    nombre?: StringFilter<"Producto"> | string
    precio?: FloatFilter<"Producto"> | number
    proveedorId?: IntFilter<"Producto"> | number
    createdAt?: DateTimeFilter<"Producto"> | Date | string
    updatedAt?: DateTimeFilter<"Producto"> | Date | string
  }

  export type ServicioUpsertWithWhereUniqueWithoutProveedorInput = {
    where: ServicioWhereUniqueInput
    update: XOR<ServicioUpdateWithoutProveedorInput, ServicioUncheckedUpdateWithoutProveedorInput>
    create: XOR<ServicioCreateWithoutProveedorInput, ServicioUncheckedCreateWithoutProveedorInput>
  }

  export type ServicioUpdateWithWhereUniqueWithoutProveedorInput = {
    where: ServicioWhereUniqueInput
    data: XOR<ServicioUpdateWithoutProveedorInput, ServicioUncheckedUpdateWithoutProveedorInput>
  }

  export type ServicioUpdateManyWithWhereWithoutProveedorInput = {
    where: ServicioScalarWhereInput
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyWithoutProveedorInput>
  }

  export type ServicioScalarWhereInput = {
    AND?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
    OR?: ServicioScalarWhereInput[]
    NOT?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
    id?: IntFilter<"Servicio"> | number
    nombre?: StringFilter<"Servicio"> | string
    descripcion?: StringFilter<"Servicio"> | string
    precio?: FloatFilter<"Servicio"> | number
    proveedorId?: IntFilter<"Servicio"> | number
    createdAt?: DateTimeFilter<"Servicio"> | Date | string
    updatedAt?: DateTimeFilter<"Servicio"> | Date | string
  }

  export type PresupuestoUpsertWithWhereUniqueWithoutClienteInput = {
    where: PresupuestoWhereUniqueInput
    update: XOR<PresupuestoUpdateWithoutClienteInput, PresupuestoUncheckedUpdateWithoutClienteInput>
    create: XOR<PresupuestoCreateWithoutClienteInput, PresupuestoUncheckedCreateWithoutClienteInput>
  }

  export type PresupuestoUpdateWithWhereUniqueWithoutClienteInput = {
    where: PresupuestoWhereUniqueInput
    data: XOR<PresupuestoUpdateWithoutClienteInput, PresupuestoUncheckedUpdateWithoutClienteInput>
  }

  export type PresupuestoUpdateManyWithWhereWithoutClienteInput = {
    where: PresupuestoScalarWhereInput
    data: XOR<PresupuestoUpdateManyMutationInput, PresupuestoUncheckedUpdateManyWithoutClienteInput>
  }

  export type PresupuestoScalarWhereInput = {
    AND?: PresupuestoScalarWhereInput | PresupuestoScalarWhereInput[]
    OR?: PresupuestoScalarWhereInput[]
    NOT?: PresupuestoScalarWhereInput | PresupuestoScalarWhereInput[]
    id?: IntFilter<"Presupuesto"> | number
    clienteId?: IntFilter<"Presupuesto"> | number
    subtotal?: FloatFilter<"Presupuesto"> | number
    impuestos?: FloatFilter<"Presupuesto"> | number
    total?: FloatFilter<"Presupuesto"> | number
    estado?: EnumEstadoPresupuestoFilter<"Presupuesto"> | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFilter<"Presupuesto"> | Date | string
    updatedAt?: DateTimeFilter<"Presupuesto"> | Date | string
  }

  export type ReciboUpsertWithWhereUniqueWithoutPersonaInput = {
    where: ReciboWhereUniqueInput
    update: XOR<ReciboUpdateWithoutPersonaInput, ReciboUncheckedUpdateWithoutPersonaInput>
    create: XOR<ReciboCreateWithoutPersonaInput, ReciboUncheckedCreateWithoutPersonaInput>
  }

  export type ReciboUpdateWithWhereUniqueWithoutPersonaInput = {
    where: ReciboWhereUniqueInput
    data: XOR<ReciboUpdateWithoutPersonaInput, ReciboUncheckedUpdateWithoutPersonaInput>
  }

  export type ReciboUpdateManyWithWhereWithoutPersonaInput = {
    where: ReciboScalarWhereInput
    data: XOR<ReciboUpdateManyMutationInput, ReciboUncheckedUpdateManyWithoutPersonaInput>
  }

  export type ReciboScalarWhereInput = {
    AND?: ReciboScalarWhereInput | ReciboScalarWhereInput[]
    OR?: ReciboScalarWhereInput[]
    NOT?: ReciboScalarWhereInput | ReciboScalarWhereInput[]
    id?: IntFilter<"Recibo"> | number
    personaId?: IntFilter<"Recibo"> | number
    concepto?: StringFilter<"Recibo"> | string
    monto?: FloatFilter<"Recibo"> | number
    fecha?: DateTimeFilter<"Recibo"> | Date | string
    metodoPago?: StringFilter<"Recibo"> | string
    createdAt?: DateTimeFilter<"Recibo"> | Date | string
    updatedAt?: DateTimeFilter<"Recibo"> | Date | string
  }

  export type PersonaCreateWithoutProductosInput = {
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    servicios?: ServicioCreateNestedManyWithoutProveedorInput
    presupuestos?: PresupuestoCreateNestedManyWithoutClienteInput
    recibos?: ReciboCreateNestedManyWithoutPersonaInput
  }

  export type PersonaUncheckedCreateWithoutProductosInput = {
    id?: number
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    servicios?: ServicioUncheckedCreateNestedManyWithoutProveedorInput
    presupuestos?: PresupuestoUncheckedCreateNestedManyWithoutClienteInput
    recibos?: ReciboUncheckedCreateNestedManyWithoutPersonaInput
  }

  export type PersonaCreateOrConnectWithoutProductosInput = {
    where: PersonaWhereUniqueInput
    create: XOR<PersonaCreateWithoutProductosInput, PersonaUncheckedCreateWithoutProductosInput>
  }

  export type ItemCreateWithoutProductoInput = {
    cantidad: number
    precioUnitario: number
    presupuesto: PresupuestoCreateNestedOneWithoutItemsInput
    servicio?: ServicioCreateNestedOneWithoutItemsInput
  }

  export type ItemUncheckedCreateWithoutProductoInput = {
    id?: number
    presupuestoId: number
    servicioId?: number | null
    cantidad: number
    precioUnitario: number
  }

  export type ItemCreateOrConnectWithoutProductoInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutProductoInput, ItemUncheckedCreateWithoutProductoInput>
  }

  export type ItemCreateManyProductoInputEnvelope = {
    data: ItemCreateManyProductoInput | ItemCreateManyProductoInput[]
    skipDuplicates?: boolean
  }

  export type PersonaUpsertWithoutProductosInput = {
    update: XOR<PersonaUpdateWithoutProductosInput, PersonaUncheckedUpdateWithoutProductosInput>
    create: XOR<PersonaCreateWithoutProductosInput, PersonaUncheckedCreateWithoutProductosInput>
    where?: PersonaWhereInput
  }

  export type PersonaUpdateToOneWithWhereWithoutProductosInput = {
    where?: PersonaWhereInput
    data: XOR<PersonaUpdateWithoutProductosInput, PersonaUncheckedUpdateWithoutProductosInput>
  }

  export type PersonaUpdateWithoutProductosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servicios?: ServicioUpdateManyWithoutProveedorNestedInput
    presupuestos?: PresupuestoUpdateManyWithoutClienteNestedInput
    recibos?: ReciboUpdateManyWithoutPersonaNestedInput
  }

  export type PersonaUncheckedUpdateWithoutProductosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servicios?: ServicioUncheckedUpdateManyWithoutProveedorNestedInput
    presupuestos?: PresupuestoUncheckedUpdateManyWithoutClienteNestedInput
    recibos?: ReciboUncheckedUpdateManyWithoutPersonaNestedInput
  }

  export type ItemUpsertWithWhereUniqueWithoutProductoInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutProductoInput, ItemUncheckedUpdateWithoutProductoInput>
    create: XOR<ItemCreateWithoutProductoInput, ItemUncheckedCreateWithoutProductoInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutProductoInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutProductoInput, ItemUncheckedUpdateWithoutProductoInput>
  }

  export type ItemUpdateManyWithWhereWithoutProductoInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutProductoInput>
  }

  export type ItemScalarWhereInput = {
    AND?: ItemScalarWhereInput | ItemScalarWhereInput[]
    OR?: ItemScalarWhereInput[]
    NOT?: ItemScalarWhereInput | ItemScalarWhereInput[]
    id?: IntFilter<"Item"> | number
    presupuestoId?: IntFilter<"Item"> | number
    productoId?: IntNullableFilter<"Item"> | number | null
    servicioId?: IntNullableFilter<"Item"> | number | null
    cantidad?: IntFilter<"Item"> | number
    precioUnitario?: FloatFilter<"Item"> | number
  }

  export type PersonaCreateWithoutServiciosInput = {
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productos?: ProductoCreateNestedManyWithoutProveedorInput
    presupuestos?: PresupuestoCreateNestedManyWithoutClienteInput
    recibos?: ReciboCreateNestedManyWithoutPersonaInput
  }

  export type PersonaUncheckedCreateWithoutServiciosInput = {
    id?: number
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productos?: ProductoUncheckedCreateNestedManyWithoutProveedorInput
    presupuestos?: PresupuestoUncheckedCreateNestedManyWithoutClienteInput
    recibos?: ReciboUncheckedCreateNestedManyWithoutPersonaInput
  }

  export type PersonaCreateOrConnectWithoutServiciosInput = {
    where: PersonaWhereUniqueInput
    create: XOR<PersonaCreateWithoutServiciosInput, PersonaUncheckedCreateWithoutServiciosInput>
  }

  export type ItemCreateWithoutServicioInput = {
    cantidad: number
    precioUnitario: number
    presupuesto: PresupuestoCreateNestedOneWithoutItemsInput
    producto?: ProductoCreateNestedOneWithoutItemsInput
  }

  export type ItemUncheckedCreateWithoutServicioInput = {
    id?: number
    presupuestoId: number
    productoId?: number | null
    cantidad: number
    precioUnitario: number
  }

  export type ItemCreateOrConnectWithoutServicioInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutServicioInput, ItemUncheckedCreateWithoutServicioInput>
  }

  export type ItemCreateManyServicioInputEnvelope = {
    data: ItemCreateManyServicioInput | ItemCreateManyServicioInput[]
    skipDuplicates?: boolean
  }

  export type PersonaUpsertWithoutServiciosInput = {
    update: XOR<PersonaUpdateWithoutServiciosInput, PersonaUncheckedUpdateWithoutServiciosInput>
    create: XOR<PersonaCreateWithoutServiciosInput, PersonaUncheckedCreateWithoutServiciosInput>
    where?: PersonaWhereInput
  }

  export type PersonaUpdateToOneWithWhereWithoutServiciosInput = {
    where?: PersonaWhereInput
    data: XOR<PersonaUpdateWithoutServiciosInput, PersonaUncheckedUpdateWithoutServiciosInput>
  }

  export type PersonaUpdateWithoutServiciosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productos?: ProductoUpdateManyWithoutProveedorNestedInput
    presupuestos?: PresupuestoUpdateManyWithoutClienteNestedInput
    recibos?: ReciboUpdateManyWithoutPersonaNestedInput
  }

  export type PersonaUncheckedUpdateWithoutServiciosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productos?: ProductoUncheckedUpdateManyWithoutProveedorNestedInput
    presupuestos?: PresupuestoUncheckedUpdateManyWithoutClienteNestedInput
    recibos?: ReciboUncheckedUpdateManyWithoutPersonaNestedInput
  }

  export type ItemUpsertWithWhereUniqueWithoutServicioInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutServicioInput, ItemUncheckedUpdateWithoutServicioInput>
    create: XOR<ItemCreateWithoutServicioInput, ItemUncheckedCreateWithoutServicioInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutServicioInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutServicioInput, ItemUncheckedUpdateWithoutServicioInput>
  }

  export type ItemUpdateManyWithWhereWithoutServicioInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutServicioInput>
  }

  export type PersonaCreateWithoutPresupuestosInput = {
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productos?: ProductoCreateNestedManyWithoutProveedorInput
    servicios?: ServicioCreateNestedManyWithoutProveedorInput
    recibos?: ReciboCreateNestedManyWithoutPersonaInput
  }

  export type PersonaUncheckedCreateWithoutPresupuestosInput = {
    id?: number
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productos?: ProductoUncheckedCreateNestedManyWithoutProveedorInput
    servicios?: ServicioUncheckedCreateNestedManyWithoutProveedorInput
    recibos?: ReciboUncheckedCreateNestedManyWithoutPersonaInput
  }

  export type PersonaCreateOrConnectWithoutPresupuestosInput = {
    where: PersonaWhereUniqueInput
    create: XOR<PersonaCreateWithoutPresupuestosInput, PersonaUncheckedCreateWithoutPresupuestosInput>
  }

  export type ItemCreateWithoutPresupuestoInput = {
    cantidad: number
    precioUnitario: number
    producto?: ProductoCreateNestedOneWithoutItemsInput
    servicio?: ServicioCreateNestedOneWithoutItemsInput
  }

  export type ItemUncheckedCreateWithoutPresupuestoInput = {
    id?: number
    productoId?: number | null
    servicioId?: number | null
    cantidad: number
    precioUnitario: number
  }

  export type ItemCreateOrConnectWithoutPresupuestoInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutPresupuestoInput, ItemUncheckedCreateWithoutPresupuestoInput>
  }

  export type ItemCreateManyPresupuestoInputEnvelope = {
    data: ItemCreateManyPresupuestoInput | ItemCreateManyPresupuestoInput[]
    skipDuplicates?: boolean
  }

  export type FacturaCreateWithoutPresupuestoInput = {
    numero: string
    fecha: Date | string
    subtotal: number
    impuestos: number
    total: number
    estado: $Enums.EstadoFactura
    createdAt?: Date | string
    updatedAt?: Date | string
    impuestoAplicado: ImpuestoCreateNestedOneWithoutFacturasInput
  }

  export type FacturaUncheckedCreateWithoutPresupuestoInput = {
    id?: number
    numero: string
    fecha: Date | string
    subtotal: number
    impuestos: number
    total: number
    estado: $Enums.EstadoFactura
    impuestoAplicadoId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacturaCreateOrConnectWithoutPresupuestoInput = {
    where: FacturaWhereUniqueInput
    create: XOR<FacturaCreateWithoutPresupuestoInput, FacturaUncheckedCreateWithoutPresupuestoInput>
  }

  export type PersonaUpsertWithoutPresupuestosInput = {
    update: XOR<PersonaUpdateWithoutPresupuestosInput, PersonaUncheckedUpdateWithoutPresupuestosInput>
    create: XOR<PersonaCreateWithoutPresupuestosInput, PersonaUncheckedCreateWithoutPresupuestosInput>
    where?: PersonaWhereInput
  }

  export type PersonaUpdateToOneWithWhereWithoutPresupuestosInput = {
    where?: PersonaWhereInput
    data: XOR<PersonaUpdateWithoutPresupuestosInput, PersonaUncheckedUpdateWithoutPresupuestosInput>
  }

  export type PersonaUpdateWithoutPresupuestosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productos?: ProductoUpdateManyWithoutProveedorNestedInput
    servicios?: ServicioUpdateManyWithoutProveedorNestedInput
    recibos?: ReciboUpdateManyWithoutPersonaNestedInput
  }

  export type PersonaUncheckedUpdateWithoutPresupuestosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productos?: ProductoUncheckedUpdateManyWithoutProveedorNestedInput
    servicios?: ServicioUncheckedUpdateManyWithoutProveedorNestedInput
    recibos?: ReciboUncheckedUpdateManyWithoutPersonaNestedInput
  }

  export type ItemUpsertWithWhereUniqueWithoutPresupuestoInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutPresupuestoInput, ItemUncheckedUpdateWithoutPresupuestoInput>
    create: XOR<ItemCreateWithoutPresupuestoInput, ItemUncheckedCreateWithoutPresupuestoInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutPresupuestoInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutPresupuestoInput, ItemUncheckedUpdateWithoutPresupuestoInput>
  }

  export type ItemUpdateManyWithWhereWithoutPresupuestoInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutPresupuestoInput>
  }

  export type FacturaUpsertWithoutPresupuestoInput = {
    update: XOR<FacturaUpdateWithoutPresupuestoInput, FacturaUncheckedUpdateWithoutPresupuestoInput>
    create: XOR<FacturaCreateWithoutPresupuestoInput, FacturaUncheckedCreateWithoutPresupuestoInput>
    where?: FacturaWhereInput
  }

  export type FacturaUpdateToOneWithWhereWithoutPresupuestoInput = {
    where?: FacturaWhereInput
    data: XOR<FacturaUpdateWithoutPresupuestoInput, FacturaUncheckedUpdateWithoutPresupuestoInput>
  }

  export type FacturaUpdateWithoutPresupuestoInput = {
    numero?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    impuestoAplicado?: ImpuestoUpdateOneRequiredWithoutFacturasNestedInput
  }

  export type FacturaUncheckedUpdateWithoutPresupuestoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    impuestoAplicadoId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresupuestoCreateWithoutItemsInput = {
    subtotal: number
    impuestos: number
    total: number
    estado?: $Enums.EstadoPresupuesto
    createdAt?: Date | string
    updatedAt?: Date | string
    cliente: PersonaCreateNestedOneWithoutPresupuestosInput
    factura?: FacturaCreateNestedOneWithoutPresupuestoInput
  }

  export type PresupuestoUncheckedCreateWithoutItemsInput = {
    id?: number
    clienteId: number
    subtotal: number
    impuestos: number
    total: number
    estado?: $Enums.EstadoPresupuesto
    createdAt?: Date | string
    updatedAt?: Date | string
    factura?: FacturaUncheckedCreateNestedOneWithoutPresupuestoInput
  }

  export type PresupuestoCreateOrConnectWithoutItemsInput = {
    where: PresupuestoWhereUniqueInput
    create: XOR<PresupuestoCreateWithoutItemsInput, PresupuestoUncheckedCreateWithoutItemsInput>
  }

  export type ProductoCreateWithoutItemsInput = {
    nombre: string
    precio: number
    createdAt?: Date | string
    updatedAt?: Date | string
    proveedor: PersonaCreateNestedOneWithoutProductosInput
  }

  export type ProductoUncheckedCreateWithoutItemsInput = {
    id?: number
    nombre: string
    precio: number
    proveedorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductoCreateOrConnectWithoutItemsInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutItemsInput, ProductoUncheckedCreateWithoutItemsInput>
  }

  export type ServicioCreateWithoutItemsInput = {
    nombre: string
    descripcion: string
    precio: number
    createdAt?: Date | string
    updatedAt?: Date | string
    proveedor: PersonaCreateNestedOneWithoutServiciosInput
  }

  export type ServicioUncheckedCreateWithoutItemsInput = {
    id?: number
    nombre: string
    descripcion: string
    precio: number
    proveedorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServicioCreateOrConnectWithoutItemsInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutItemsInput, ServicioUncheckedCreateWithoutItemsInput>
  }

  export type PresupuestoUpsertWithoutItemsInput = {
    update: XOR<PresupuestoUpdateWithoutItemsInput, PresupuestoUncheckedUpdateWithoutItemsInput>
    create: XOR<PresupuestoCreateWithoutItemsInput, PresupuestoUncheckedCreateWithoutItemsInput>
    where?: PresupuestoWhereInput
  }

  export type PresupuestoUpdateToOneWithWhereWithoutItemsInput = {
    where?: PresupuestoWhereInput
    data: XOR<PresupuestoUpdateWithoutItemsInput, PresupuestoUncheckedUpdateWithoutItemsInput>
  }

  export type PresupuestoUpdateWithoutItemsInput = {
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: PersonaUpdateOneRequiredWithoutPresupuestosNestedInput
    factura?: FacturaUpdateOneWithoutPresupuestoNestedInput
  }

  export type PresupuestoUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    factura?: FacturaUncheckedUpdateOneWithoutPresupuestoNestedInput
  }

  export type ProductoUpsertWithoutItemsInput = {
    update: XOR<ProductoUpdateWithoutItemsInput, ProductoUncheckedUpdateWithoutItemsInput>
    create: XOR<ProductoCreateWithoutItemsInput, ProductoUncheckedCreateWithoutItemsInput>
    where?: ProductoWhereInput
  }

  export type ProductoUpdateToOneWithWhereWithoutItemsInput = {
    where?: ProductoWhereInput
    data: XOR<ProductoUpdateWithoutItemsInput, ProductoUncheckedUpdateWithoutItemsInput>
  }

  export type ProductoUpdateWithoutItemsInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: PersonaUpdateOneRequiredWithoutProductosNestedInput
  }

  export type ProductoUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    proveedorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioUpsertWithoutItemsInput = {
    update: XOR<ServicioUpdateWithoutItemsInput, ServicioUncheckedUpdateWithoutItemsInput>
    create: XOR<ServicioCreateWithoutItemsInput, ServicioUncheckedCreateWithoutItemsInput>
    where?: ServicioWhereInput
  }

  export type ServicioUpdateToOneWithWhereWithoutItemsInput = {
    where?: ServicioWhereInput
    data: XOR<ServicioUpdateWithoutItemsInput, ServicioUncheckedUpdateWithoutItemsInput>
  }

  export type ServicioUpdateWithoutItemsInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: PersonaUpdateOneRequiredWithoutServiciosNestedInput
  }

  export type ServicioUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    proveedorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresupuestoCreateWithoutFacturaInput = {
    subtotal: number
    impuestos: number
    total: number
    estado?: $Enums.EstadoPresupuesto
    createdAt?: Date | string
    updatedAt?: Date | string
    cliente: PersonaCreateNestedOneWithoutPresupuestosInput
    items?: ItemCreateNestedManyWithoutPresupuestoInput
  }

  export type PresupuestoUncheckedCreateWithoutFacturaInput = {
    id?: number
    clienteId: number
    subtotal: number
    impuestos: number
    total: number
    estado?: $Enums.EstadoPresupuesto
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutPresupuestoInput
  }

  export type PresupuestoCreateOrConnectWithoutFacturaInput = {
    where: PresupuestoWhereUniqueInput
    create: XOR<PresupuestoCreateWithoutFacturaInput, PresupuestoUncheckedCreateWithoutFacturaInput>
  }

  export type ImpuestoCreateWithoutFacturasInput = {
    nombre: string
    porcentaje: number
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImpuestoUncheckedCreateWithoutFacturasInput = {
    id?: number
    nombre: string
    porcentaje: number
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImpuestoCreateOrConnectWithoutFacturasInput = {
    where: ImpuestoWhereUniqueInput
    create: XOR<ImpuestoCreateWithoutFacturasInput, ImpuestoUncheckedCreateWithoutFacturasInput>
  }

  export type PresupuestoUpsertWithoutFacturaInput = {
    update: XOR<PresupuestoUpdateWithoutFacturaInput, PresupuestoUncheckedUpdateWithoutFacturaInput>
    create: XOR<PresupuestoCreateWithoutFacturaInput, PresupuestoUncheckedCreateWithoutFacturaInput>
    where?: PresupuestoWhereInput
  }

  export type PresupuestoUpdateToOneWithWhereWithoutFacturaInput = {
    where?: PresupuestoWhereInput
    data: XOR<PresupuestoUpdateWithoutFacturaInput, PresupuestoUncheckedUpdateWithoutFacturaInput>
  }

  export type PresupuestoUpdateWithoutFacturaInput = {
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: PersonaUpdateOneRequiredWithoutPresupuestosNestedInput
    items?: ItemUpdateManyWithoutPresupuestoNestedInput
  }

  export type PresupuestoUncheckedUpdateWithoutFacturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutPresupuestoNestedInput
  }

  export type ImpuestoUpsertWithoutFacturasInput = {
    update: XOR<ImpuestoUpdateWithoutFacturasInput, ImpuestoUncheckedUpdateWithoutFacturasInput>
    create: XOR<ImpuestoCreateWithoutFacturasInput, ImpuestoUncheckedCreateWithoutFacturasInput>
    where?: ImpuestoWhereInput
  }

  export type ImpuestoUpdateToOneWithWhereWithoutFacturasInput = {
    where?: ImpuestoWhereInput
    data: XOR<ImpuestoUpdateWithoutFacturasInput, ImpuestoUncheckedUpdateWithoutFacturasInput>
  }

  export type ImpuestoUpdateWithoutFacturasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    porcentaje?: FloatFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImpuestoUncheckedUpdateWithoutFacturasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    porcentaje?: FloatFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonaCreateWithoutRecibosInput = {
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productos?: ProductoCreateNestedManyWithoutProveedorInput
    servicios?: ServicioCreateNestedManyWithoutProveedorInput
    presupuestos?: PresupuestoCreateNestedManyWithoutClienteInput
  }

  export type PersonaUncheckedCreateWithoutRecibosInput = {
    id?: number
    nombre: string
    tipo: $Enums.TipoPersona
    telefono?: string | null
    cvu?: string | null
    roles?: PersonaCreaterolesInput | $Enums.RolUsuario[]
    password: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productos?: ProductoUncheckedCreateNestedManyWithoutProveedorInput
    servicios?: ServicioUncheckedCreateNestedManyWithoutProveedorInput
    presupuestos?: PresupuestoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type PersonaCreateOrConnectWithoutRecibosInput = {
    where: PersonaWhereUniqueInput
    create: XOR<PersonaCreateWithoutRecibosInput, PersonaUncheckedCreateWithoutRecibosInput>
  }

  export type PersonaUpsertWithoutRecibosInput = {
    update: XOR<PersonaUpdateWithoutRecibosInput, PersonaUncheckedUpdateWithoutRecibosInput>
    create: XOR<PersonaCreateWithoutRecibosInput, PersonaUncheckedCreateWithoutRecibosInput>
    where?: PersonaWhereInput
  }

  export type PersonaUpdateToOneWithWhereWithoutRecibosInput = {
    where?: PersonaWhereInput
    data: XOR<PersonaUpdateWithoutRecibosInput, PersonaUncheckedUpdateWithoutRecibosInput>
  }

  export type PersonaUpdateWithoutRecibosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productos?: ProductoUpdateManyWithoutProveedorNestedInput
    servicios?: ServicioUpdateManyWithoutProveedorNestedInput
    presupuestos?: PresupuestoUpdateManyWithoutClienteNestedInput
  }

  export type PersonaUncheckedUpdateWithoutRecibosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoPersonaFieldUpdateOperationsInput | $Enums.TipoPersona
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    cvu?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: PersonaUpdaterolesInput | $Enums.RolUsuario[]
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productos?: ProductoUncheckedUpdateManyWithoutProveedorNestedInput
    servicios?: ServicioUncheckedUpdateManyWithoutProveedorNestedInput
    presupuestos?: PresupuestoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type FacturaCreateWithoutImpuestoAplicadoInput = {
    numero: string
    fecha: Date | string
    subtotal: number
    impuestos: number
    total: number
    estado: $Enums.EstadoFactura
    createdAt?: Date | string
    updatedAt?: Date | string
    presupuesto: PresupuestoCreateNestedOneWithoutFacturaInput
  }

  export type FacturaUncheckedCreateWithoutImpuestoAplicadoInput = {
    id?: number
    numero: string
    presupuestoId: number
    fecha: Date | string
    subtotal: number
    impuestos: number
    total: number
    estado: $Enums.EstadoFactura
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacturaCreateOrConnectWithoutImpuestoAplicadoInput = {
    where: FacturaWhereUniqueInput
    create: XOR<FacturaCreateWithoutImpuestoAplicadoInput, FacturaUncheckedCreateWithoutImpuestoAplicadoInput>
  }

  export type FacturaCreateManyImpuestoAplicadoInputEnvelope = {
    data: FacturaCreateManyImpuestoAplicadoInput | FacturaCreateManyImpuestoAplicadoInput[]
    skipDuplicates?: boolean
  }

  export type FacturaUpsertWithWhereUniqueWithoutImpuestoAplicadoInput = {
    where: FacturaWhereUniqueInput
    update: XOR<FacturaUpdateWithoutImpuestoAplicadoInput, FacturaUncheckedUpdateWithoutImpuestoAplicadoInput>
    create: XOR<FacturaCreateWithoutImpuestoAplicadoInput, FacturaUncheckedCreateWithoutImpuestoAplicadoInput>
  }

  export type FacturaUpdateWithWhereUniqueWithoutImpuestoAplicadoInput = {
    where: FacturaWhereUniqueInput
    data: XOR<FacturaUpdateWithoutImpuestoAplicadoInput, FacturaUncheckedUpdateWithoutImpuestoAplicadoInput>
  }

  export type FacturaUpdateManyWithWhereWithoutImpuestoAplicadoInput = {
    where: FacturaScalarWhereInput
    data: XOR<FacturaUpdateManyMutationInput, FacturaUncheckedUpdateManyWithoutImpuestoAplicadoInput>
  }

  export type FacturaScalarWhereInput = {
    AND?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
    OR?: FacturaScalarWhereInput[]
    NOT?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
    id?: IntFilter<"Factura"> | number
    numero?: StringFilter<"Factura"> | string
    presupuestoId?: IntFilter<"Factura"> | number
    fecha?: DateTimeFilter<"Factura"> | Date | string
    subtotal?: FloatFilter<"Factura"> | number
    impuestos?: FloatFilter<"Factura"> | number
    total?: FloatFilter<"Factura"> | number
    estado?: EnumEstadoFacturaFilter<"Factura"> | $Enums.EstadoFactura
    impuestoAplicadoId?: IntFilter<"Factura"> | number
    createdAt?: DateTimeFilter<"Factura"> | Date | string
    updatedAt?: DateTimeFilter<"Factura"> | Date | string
  }

  export type ProductoCreateManyProveedorInput = {
    id?: number
    nombre: string
    precio: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServicioCreateManyProveedorInput = {
    id?: number
    nombre: string
    descripcion: string
    precio: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PresupuestoCreateManyClienteInput = {
    id?: number
    subtotal: number
    impuestos: number
    total: number
    estado?: $Enums.EstadoPresupuesto
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReciboCreateManyPersonaInput = {
    id?: number
    concepto: string
    monto: number
    fecha: Date | string
    metodoPago: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductoUpdateWithoutProveedorInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateWithoutProveedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateManyWithoutProveedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioUpdateWithoutProveedorInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateWithoutProveedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateManyWithoutProveedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresupuestoUpdateWithoutClienteInput = {
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutPresupuestoNestedInput
    factura?: FacturaUpdateOneWithoutPresupuestoNestedInput
  }

  export type PresupuestoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutPresupuestoNestedInput
    factura?: FacturaUncheckedUpdateOneWithoutPresupuestoNestedInput
  }

  export type PresupuestoUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoPresupuestoFieldUpdateOperationsInput | $Enums.EstadoPresupuesto
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReciboUpdateWithoutPersonaInput = {
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: FloatFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPago?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReciboUncheckedUpdateWithoutPersonaInput = {
    id?: IntFieldUpdateOperationsInput | number
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: FloatFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPago?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReciboUncheckedUpdateManyWithoutPersonaInput = {
    id?: IntFieldUpdateOperationsInput | number
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: FloatFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPago?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemCreateManyProductoInput = {
    id?: number
    presupuestoId: number
    servicioId?: number | null
    cantidad: number
    precioUnitario: number
  }

  export type ItemUpdateWithoutProductoInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    presupuesto?: PresupuestoUpdateOneRequiredWithoutItemsNestedInput
    servicio?: ServicioUpdateOneWithoutItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    presupuestoId?: IntFieldUpdateOperationsInput | number
    servicioId?: NullableIntFieldUpdateOperationsInput | number | null
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
  }

  export type ItemUncheckedUpdateManyWithoutProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    presupuestoId?: IntFieldUpdateOperationsInput | number
    servicioId?: NullableIntFieldUpdateOperationsInput | number | null
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
  }

  export type ItemCreateManyServicioInput = {
    id?: number
    presupuestoId: number
    productoId?: number | null
    cantidad: number
    precioUnitario: number
  }

  export type ItemUpdateWithoutServicioInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    presupuesto?: PresupuestoUpdateOneRequiredWithoutItemsNestedInput
    producto?: ProductoUpdateOneWithoutItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    presupuestoId?: IntFieldUpdateOperationsInput | number
    productoId?: NullableIntFieldUpdateOperationsInput | number | null
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
  }

  export type ItemUncheckedUpdateManyWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    presupuestoId?: IntFieldUpdateOperationsInput | number
    productoId?: NullableIntFieldUpdateOperationsInput | number | null
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
  }

  export type ItemCreateManyPresupuestoInput = {
    id?: number
    productoId?: number | null
    servicioId?: number | null
    cantidad: number
    precioUnitario: number
  }

  export type ItemUpdateWithoutPresupuestoInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    producto?: ProductoUpdateOneWithoutItemsNestedInput
    servicio?: ServicioUpdateOneWithoutItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutPresupuestoInput = {
    id?: IntFieldUpdateOperationsInput | number
    productoId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: NullableIntFieldUpdateOperationsInput | number | null
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
  }

  export type ItemUncheckedUpdateManyWithoutPresupuestoInput = {
    id?: IntFieldUpdateOperationsInput | number
    productoId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: NullableIntFieldUpdateOperationsInput | number | null
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
  }

  export type FacturaCreateManyImpuestoAplicadoInput = {
    id?: number
    numero: string
    presupuestoId: number
    fecha: Date | string
    subtotal: number
    impuestos: number
    total: number
    estado: $Enums.EstadoFactura
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacturaUpdateWithoutImpuestoAplicadoInput = {
    numero?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presupuesto?: PresupuestoUpdateOneRequiredWithoutFacturaNestedInput
  }

  export type FacturaUncheckedUpdateWithoutImpuestoAplicadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    presupuestoId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaUncheckedUpdateManyWithoutImpuestoAplicadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    presupuestoId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: FloatFieldUpdateOperationsInput | number
    impuestos?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}